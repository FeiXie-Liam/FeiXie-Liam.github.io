<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2019/02/28/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/02/28/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux系统作为开发人员最为常用的操作系统, 掌握基本的Linux终端交互命令是与Linux系统交互的基本要求, 下面将会介绍一些常用的Linux终端命令.</p><a id="more"></a><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><hr><h3 id="cut-–-删除文件内容并在终端打印具体信息"><a href="#cut-–-删除文件内容并在终端打印具体信息" class="headerlink" title="cut – 删除文件内容并在终端打印具体信息"></a>cut – 删除文件内容并在终端打印具体信息</h3><h4 id="常用参数options"><a href="#常用参数options" class="headerlink" title="常用参数options:"></a>常用参数options:</h4><ul><li><code>-d</code>: 指定使用的分隔符</li><li><code>-f</code>: 指定在终端打印的内容</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><p><img src="http://images2.imagebam.com/51/60/61/efc7311146491154.jpg" alt="cut"></p><p>例子中的<code>-d&quot; &quot;</code>指定使用<code>&quot; &quot;</code>进行分割, 然后<code>-f 6-</code>表示截取每行中,通过<code>&quot; &quot;</code>进行分割后的第6个元素开始到最后一个元素, 最后输出到终端. 可以与<code>&gt;</code>/<code>&gt;&gt;</code>操作符组合使用, 将结果复写到文件中.</p><h3 id="gt-与-gt-gt-操作符-–-重定向标准输出到新的位置"><a href="#gt-与-gt-gt-操作符-–-重定向标准输出到新的位置" class="headerlink" title="&gt;与&gt;&gt;操作符 – 重定向标准输出到新的位置"></a>&gt;与&gt;&gt;操作符 – 重定向标准输出到新的位置</h3><p>将上个命令的输出重定向到用户指定的位置.</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p><img src="http://images2.imagebam.com/2c/07/a8/f5505b1147274014.jpg" alt="&gt;&gt;"></p><p>可以发现, <code>&gt;</code>首先会清空文件, 然后将输出重定向到ancient.txt文件. <code>&gt;&gt;</code>操作符则是在文件最后添加重定向内容, 不会清楚文件中的原有内容.</p><h3 id="sort-–-对文件内容通过首行第一个字符的字母顺序进行排序"><a href="#sort-–-对文件内容通过首行第一个字符的字母顺序进行排序" class="headerlink" title="sort – 对文件内容通过首行第一个字符的字母顺序进行排序"></a>sort – 对文件内容通过首行第一个字符的字母顺序进行排序</h3><h4 id="常用参数options-1"><a href="#常用参数options-1" class="headerlink" title="常用参数options"></a>常用参数options</h4><p><code>-n</code>: 根据数字顺序对文件进行排序</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p><img src="http://images2.imagebam.com/7a/19/fc/b4870b1147278274.jpg" alt="sort"></p><p>对文件内容进行排序并输出到终端. 可以与<code>&gt;</code>/<code>&gt;&gt;</code>操作符组合使用, 将结果复写到文件中.</p><h3 id="wc-–-计算文件字数"><a href="#wc-–-计算文件字数" class="headerlink" title="wc – 计算文件字数"></a>wc – 计算文件字数</h3><h4 id="常用参数options-2"><a href="#常用参数options-2" class="headerlink" title="常用参数options"></a>常用参数options</h4><ul><li><code>-l</code>: 输出文件的行数</li><li><code>-w</code>: 输出文件的字数</li></ul><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><p><img src="http://images2.imagebam.com/89/63/39/86e8461147285794.jpg" alt="wc"></p><h2 id="管道和正则表达式"><a href="#管道和正则表达式" class="headerlink" title="管道和正则表达式"></a>管道和正则表达式</h2><hr><h3 id="grep-–-输出文件中符合给定结构的行"><a href="#grep-–-输出文件中符合给定结构的行" class="headerlink" title="grep – 输出文件中符合给定结构的行"></a>grep – 输出文件中符合给定结构的行</h3><h4 id="常用参数options-3"><a href="#常用参数options-3" class="headerlink" title="常用参数options"></a>常用参数options</h4><ul><li><code>-i</code>: 使用大小写敏感的搜索方式</li><li><code>-v</code>: 输出不包含该结构的行</li><li><code>-r</code>: 使用递归搜索</li></ul><p>在使用grep时, 可以使用<a href="https://feixie-liam.github.io/2019/01/08/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="noopener">正则表达式</a>进行模糊搜索. </p><h3 id="–-管道符号-将上个命令的输出作为下个命令的输入"><a href="#–-管道符号-将上个命令的输出作为下个命令的输入" class="headerlink" title="| – 管道符号, 将上个命令的输出作为下个命令的输入"></a><strong>|</strong> – 管道符号, 将上个命令的输出作为下个命令的输入</h3><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><p><code>grep -i republic test.txt | wc -w</code>该命令表示找出test.txt中包含了<code>republic</code>字段的所有行, 计算并输出总字数.</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的正则表达式</title>
      <link href="/2019/01/08/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/01/08/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>正则表达式使用单个字符来描述, 匹配一系列匹配某个句法规则的字符串. 在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本. 在许多程序设计语言中都支持利用正则表达式进行字符串操作.</p><a id="more"></a><h2 id="正则表达式基本语法"><a href="#正则表达式基本语法" class="headerlink" title="正则表达式基本语法"></a>正则表达式基本语法</h2><hr><p><img src="https://upload-images.jianshu.io/upload_images/8656832-7fb7d25233929626.png" alt="基本语法"></p><h2 id="JavaScript中的正则表达式"><a href="#JavaScript中的正则表达式" class="headerlink" title="JavaScript中的正则表达式"></a>JavaScript中的正则表达式</h2><hr><h3 id="Patterns-and-flags"><a href="#Patterns-and-flags" class="headerlink" title="Patterns and flags"></a>Patterns and flags</h3><p>JavaScript有两种方式创建一个正则表达式, 一个正则表达式由pattern和可选的flags组成的.比如:</p><pre class=" language-javascript"><code class="language-javascript">regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'pattern'</span><span class="token punctuation">,</span> <span class="token string">'flags'</span><span class="token punctuation">)</span></code></pre><p>或者使用<code>&quot;/&quot;</code>符号:</p><pre class=" language-javascript"><code class="language-javascript">regexp <span class="token operator">=</span> <span class="token regex">/pattern/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//no flags</span>regexp <span class="token operator">=</span> <span class="token regex">/pattern/gmi</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//with flags</span></code></pre><p>一般情况下, 我们会使用简单语法<code>/.../</code>但是这种语法不支持插入变量. 因此当你需要动态的创造正则规则时,需要使用<code>new RegExp</code></p><p>在搜索字符串中符合特定规则的子字符串时, 可以使用<code>search</code>函数和正则表达式:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> search <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'what you want?'</span><span class="token punctuation">,</span> <span class="token string">'love'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//find whatever user whats</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'I love JavaScript'</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在JavaScript中一共有5个flags:</p><table><thead><tr><th>flag</th><th>description</th></tr></thead><tbody><tr><td><code>i</code></td><td>匹配时将忽略大小写</td></tr><tr><td><code>g</code></td><td>匹配时匹配所有项, 默认只匹配第一项</td></tr><tr><td><code>m</code></td><td>多行模式</td></tr><tr><td><code>u</code></td><td>启用完整的unicode支持</td></tr><tr><td><code>y</code></td><td>粘滞模式(Sticky mode)</td></tr></tbody></table><p>比如:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'I love JavaScript!'</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/LOVE/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-1 (not found)</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/LOVE/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"I love JavaScript!"</span><span class="token punctuation">;</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/javascript/iy</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 (default)</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null, not found at position 0</span>reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JavaScript (right, that word starts at position 7)</span><span class="token comment" spellcheck="true">// for any other reg.lastIndex the result is null</span></code></pre><p><code>y</code>flag表示精确匹配, 即通过设置<code>reg.lastIndex</code>, 从该index位置开始匹配正则表达式, 若匹配不上则返回null.</p><h3 id="String和RexExp的方法"><a href="#String和RexExp的方法" class="headerlink" title="String和RexExp的方法"></a>String和RexExp的方法</h3><ol><li>内建的RegExp类包含了许多正则方法</li><li>string包含了一些常见的使用正则的方法</li></ol><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>string中的内置方法有:</p><ul><li>search(reg)</li><li>match(reg)</li><li>split(reg|substr, limit)</li><li>replace(str|reg, str|func)</li></ul><p><code>.search</code>和<code>.match</code>方法默认都仅查找第一个匹配元素,如果需要匹配所有的元素需要使用<code>g</code>flag, 当使用了<code>g</code>flag其他属性将会失效(eg.括号):</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"HO-Ho-ho!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> result_without_g <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> <span class="token regex">/ho/i</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> result_with_g <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> <span class="token regex">/ho/ig</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> result_with_g_and_parentheses <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> <span class="token regex">/h(o)/ig</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> result_without_g <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HO, Ho, ho</span><span class="token function">alert</span><span class="token punctuation">(</span> result_with_g <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HO, Ho, ho</span><span class="token function">alert</span><span class="token punctuation">(</span> result_with_g_and_parentheses <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HO, Ho, ho</span></code></pre><p><strong>注意: 使用match方法的返回时<code>null</code>而不是空的数组</strong></p><p>split方法可以接收字符串和正则两种参数:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'12-34-56'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12, 34, 56]</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'12-34-56'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/-/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12, 34, 56]</span></code></pre><p>replace方法是字符串操作的<strong>强力武器</strong></p><p>一个简单的示例如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// replace dash by colon</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'12-34-56'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12:34-56</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'12-34-56'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> <span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 12:34:56</span></code></pre><p>replace的第二个参数是替换后的字符串, 该参数可使用以下符号:</p><table><thead><tr><th>Symbol</th><th>Inserts</th></tr></thead><tbody><tr><td><code>$$</code></td><td><code>&quot;$&quot;</code></td></tr><tr><td><code>$&amp;</code></td><td>the whole match</td></tr><tr><td>$`</td><td>a part of the string before the match</td></tr><tr><td><code>$&#39;</code></td><td>a part of the string after the match</td></tr><tr><td><code>$n</code></td><td>if <code>n</code> is a 1-2 digit number, then it means the contents of n-th parentheses counting from left to right</td></tr></tbody></table><p>示例如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"John Doe, John Smith and John Bull."</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// for each John - replace it with Mr. and then John</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/John/g</span><span class="token punctuation">,</span> <span class="token string">'Mr.$&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Mr.John Doe, Mr.John Smith and Mr.John Bull.";</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/John/g</span><span class="token punctuation">,</span> 'Mr<span class="token punctuation">.</span>$<span class="token template-string"><span class="token string">`'));// "Mr. Doe, Mr. Smith and Mr. Bull.";alert(str.replace(/Bull/g, 'Mr.$'));// "John Doe, John Smith and John Mr...";=================================let str = "John Smith";alert(str.replace(/(John) (Smith)/, '$2, $1')) // Smith, John=================================let i = 0;// show and replace all matchesfunction replacer(str, offset, s) {  alert(`</span></span>Found $<span class="token punctuation">{</span>str<span class="token punctuation">}</span> at position $<span class="token punctuation">{</span>offset<span class="token punctuation">}</span> <span class="token keyword">in</span> string $<span class="token punctuation">{</span>s<span class="token punctuation">}</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">"HO-Ho-ho"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/ho/gi</span><span class="token punctuation">,</span> replacer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Result: '</span> <span class="token operator">+</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Result: ho-ho-ho</span><span class="token comment" spellcheck="true">// shows each match:</span><span class="token comment" spellcheck="true">// Found HO at position 0 in string HO-Ho-ho</span><span class="token comment" spellcheck="true">// Found Ho at position 3 in string HO-Ho-ho</span><span class="token comment" spellcheck="true">// Found ho at position 6 in string HO-Ho-ho</span></code></pre><p>如果replace函数的第二个参数接收一个函数, 且第一个参数包含多个括号, 则第二个函数的参数顺序为:</p><ol><li>匹配的字符串</li><li>括号包含的匹配值按顺序往下</li><li>匹配的索引值</li><li>源字符串</li></ol><h4 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h4><p>RegExp的常见方法有:</p><ol><li>test(str)</li><li>exec(str)</li></ol><p>test方法接收一个字符串, 并返回<code>true/false</code>, 例子如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"I love JavaScript"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// these two tests do the same</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token regex">/love/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/love/i</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>exec方法主要解决了字符串中存在括号以及存在多个匹配子字符串的情况下的复杂情况, 例子如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"A lot about JavaScript at https://javascript.info"</span><span class="token punctuation">;</span><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex">/JAVA(SCRIPT)/ig</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Look for the first match</span><span class="token keyword">let</span> matchOne <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> matchOne<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JavaScript</span><span class="token function">alert</span><span class="token punctuation">(</span> matchOne<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// script</span><span class="token function">alert</span><span class="token punctuation">(</span> matchOne<span class="token punctuation">.</span>index <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12 (the position of the match)</span><span class="token function">alert</span><span class="token punctuation">(</span> matchOne<span class="token punctuation">.</span>input <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the same as str</span><span class="token function">alert</span><span class="token punctuation">(</span> regexp<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22 (the position after the match)</span><span class="token comment" spellcheck="true">// Look for the second match</span><span class="token keyword">let</span> matchTwo <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// continue searching from regexp.lastIndex</span><span class="token function">alert</span><span class="token punctuation">(</span> matchTwo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// javascript</span><span class="token function">alert</span><span class="token punctuation">(</span> matchTwo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// script</span><span class="token function">alert</span><span class="token punctuation">(</span> matchTwo<span class="token punctuation">.</span>index <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 34 (the position of the match)</span><span class="token function">alert</span><span class="token punctuation">(</span> matchTwo<span class="token punctuation">.</span>input <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the same as str</span><span class="token function">alert</span><span class="token punctuation">(</span> regexp<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 44 (the position after the match)</span><span class="token comment" spellcheck="true">// Look for the third match</span><span class="token keyword">let</span> matchThree <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// continue searching from regexp.lastIndex</span><span class="token function">alert</span><span class="token punctuation">(</span> matchThree <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null (no match)</span><span class="token function">alert</span><span class="token punctuation">(</span> regexp<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 (reset)</span></code></pre><p>一般情况下, 会在循环中使用exec函数, 以达到遍历整个字符串进行匹配的场景:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'A lot about JavaScript at https://javascript.info'</span><span class="token punctuation">;</span><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex">/javascript/ig</span><span class="token punctuation">;</span><span class="token keyword">let</span> result<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token string">`Found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>循环会在<code>result.exec</code>函数返回<code>null</code>时自动停止.</p><h2 id="组捕获"><a href="#组捕获" class="headerlink" title="组捕获"></a>组捕获</h2><hr><p>正则表达式的一部分规则通过<code>(...)</code>包含, 叫做组捕获, 组捕获可以:</p><ol><li>可以将字符串中, 符合匹配规则的部分单独存放在一个list中</li><li>如果在<code>()</code>加入量词(+*?等)将会捕获匹配了量词的整体子字符串. eg:</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Gogogo now!'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(go)+/i</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Gogogo"</span></code></pre><p>对于使用<code>()</code>包裹起来的字符串, 最后的匹配结果将是符合<code>()</code>规则的子字符串从左至右的集合, 其中集合的首项为匹配规则的字符串本身, eg:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;h1>Hello, world!&lt;/h1>'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;(.*?)>/</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Array: ["&lt;h1>", "h1"]</span></code></pre><p>但对于<code>match</code>方法, 仅当规则中不包含<code>/.../g</code>flag. 如果包含我们需要所有匹配的组, 则需要使用<code>RegExp</code>类中的<code>exec</code>方法:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;h1>Hello, world!&lt;/h1>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// two matches: opening &lt;h1> and closing &lt;/h1> tags</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;(.*?)>/g</span><span class="token punctuation">;</span><span class="token keyword">let</span> match<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>match <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// first shows the match: &lt;h1>,h1</span>  <span class="token comment" spellcheck="true">// then shows the match: &lt;/h1>,/h1</span>  <span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>组捕获同样支持嵌套组, eg:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;span class="my">'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;(([a-z]+)\s*([^>]*))>/</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;span class="my">, span class="my", span, class="my"</span></code></pre><p>如果一个组是可选的且匹配不存在, 那么对于的组捕获结果中会返回<code>undefined</code>的数组元素, eg:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token string">'ack'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/a(z)?(c)?/</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span> match<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token function">alert</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ac (whole match)</span><span class="token function">alert</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined, because there's nothing for (z)?</span><span class="token function">alert</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c</span></code></pre><p>如果我们需要使用<code>()</code>来正确使用quantifier, 但不需要捕获<code>()</code>中的内容, 可以在<code>()</code>内部开头添加<code>?:</code>, eg:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Gogo John!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// exclude Gogo from capturing</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?:go)+ (\w+)/i</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> result<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">alert</span><span class="token punctuation">(</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// John</span></code></pre><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><hr><p>通过<code>$n</code>,组同样可以应用于替换字符串中:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"John Smith"</span><span class="token punctuation">;</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\w+) (\w+)/i</span><span class="token punctuation">,</span> <span class="token string">"$2, $1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Smith, John</span></code></pre><p>另外一种反向引用的实现方式为<code>\n</code>, 假设有这样的场景, 我们需要寻找被<code>&#39;&#39;</code>或者<code>&quot;&quot;</code>包裹的内容, 那么可以使用<code>[&#39;&quot;](.*?)[&#39;&quot;]</code>结构来匹配, 但这样的话, 会存在一个问题:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"He said: \"She's the one!\"."</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/['"](.*?)['"]/g</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The result is not what we expect</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "She'</span></code></pre><p>为了解决这一问题, 我们便可以使用<code>\n</code>反向引用:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"He said: \"She's the one!\"."</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(['"])(.*?)\1/g</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "She's the one!"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Github webhook触发的Jenkins Pipeline</title>
      <link href="/2019/01/04/%E6%90%AD%E5%BB%BAGithub-webhook%E8%A7%A6%E5%8F%91%E7%9A%84Jenkins-Pipeline/"/>
      <url>/2019/01/04/%E6%90%AD%E5%BB%BAGithub-webhook%E8%A7%A6%E5%8F%91%E7%9A%84Jenkins-Pipeline/</url>
      
        <content type="html"><![CDATA[<p>本文通过docker启动Jenkins流水线, 使用ngrok将Jenkins接口暴露给github, 然后配置项目的github webhook关联Jenkins流水线项目, 实现代码变更触发流水线运行.</p><a id="more"></a><h2 id="创建Jenkins容器"><a href="#创建Jenkins容器" class="headerlink" title="创建Jenkins容器"></a>创建Jenkins容器</h2><hr><p>首先下载jenkins的docker镜像: <code>docker pull jenkins/jenkins</code></p><p><strong>注意不要使用<code>docker pull jenkins</code>下载官方镜像, 因为官方镜像版本没有更新, 无法使用pipeline等主要Jenkins插件.</strong></p><p>镜像下载完成后, 使用命令创建Jenkins容器:</p><p><code>docker run -d --name myjenkins -p 9999:8080 -p 50000:50000 -v /var/jenkins_home jenkins</code></p><p><code>-d</code>参数表示容器可在后台运行<br><code>--name</code>指定容器名称<br><code>-p [port]:[containerPort]</code>表示将容器内部的端口(containerPort)映射到外部端口(port)<br><code>jenkins/jenkins</code>表示docker image的名称</p><p>完成之后便可以通过<code>docker ps</code>命令查看到创建的好的Jenkins容器.</p><p><img src="http://images2.imagebam.com/8b/25/6d/87dfea1095234874.png" alt="image"></p><h2 id="初始化Jenkins客户端"><a href="#初始化Jenkins客户端" class="headerlink" title="初始化Jenkins客户端"></a>初始化Jenkins客户端</h2><hr><p>根据docker创建的Jenkins容器暴露出的端口<code>8081</code>,可以通过<code>http://localhost:8081</code>访问到Jenkins客户端, 客户端首次登陆需要解锁Jenkins.</p><p><img src="http://images2.imagebam.com/a9/33/0b/b73a9a1108011354.jpg" alt="Jenkins_unlock"></p><p>解锁步骤如下:</p><ol><li>执行<code>docker exec -it {jenkins_container_name} bash</code>进入容器</li><li>然后执行<code>cat /var/jenkins_home/secrets/initialAdminPassword</code></li><li>复制终端打印出的秘钥, 并粘贴到Jenkins客户端初始页面,点击继续</li></ol><p>然后进入下一页面:</p><p><img src="http://images2.imagebam.com/bc/a3/a0/df06f01108014974.jpg" alt="jenkins_plugins"></p><p>点击Install suggested plugins, 然后等待所有插件安装完成.插件完成后, 将转到创建管理员的页面:</p><p><img src="http://images2.imagebam.com/91/70/1a/bdc1db1108034754.jpg" alt="create_admin"></p><p>填写完相应信息之后, 点击继续, 然后进入配置示例页面,直接点击继续, 完成Jenkins初始化配置工作.</p><p><img src="http://images2.imagebam.com/02/0e/55/b7a8ad1108037054.jpg" alt="jenkins_ready"></p><h2 id="配置Github-webhook"><a href="#配置Github-webhook" class="headerlink" title="配置Github webhook"></a>配置Github webhook</h2><hr><p>webhook可以在Github仓库有新的提交时,自动发送消息到Jenkins,触发Jenkins流水线自动运行.</p><h3 id="生成github-token"><a href="#生成github-token" class="headerlink" title="生成github token"></a>生成github token</h3><p>进入github –&gt; setting –&gt; Developer settings –&gt; Personal Access Token –&gt; Generate new token</p><p><img src="https://upload-images.jianshu.io/upload_images/2518611-6c844d8a6bb58800.png?imageMogr2/auto-orient/" alt="github token"></p><p><img src="https://upload-images.jianshu.io/upload_images/436630-943711ff2a74919d.png?imageMogr2/auto-orient/" alt="token generate success"></p><h3 id="Github-webhooks设置"><a href="#Github-webhooks设置" class="headerlink" title="Github webhooks设置"></a>Github webhooks设置</h3><p>由于是在本地使用docker启动的Jenkins容器,因此需要使用<a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok</a>将Jenkins地址暴露给外网. </p><p>下载完ngrok后, 在ngrok的目录下执行<code>ngrok http 8081</code>, 其中<code>8081</code>指本地Jenkins服务端口. 然后可以看到以下界面</p><p><img src="http://images2.imagebam.com/70/2a/f5/e31f6c1110649784.jpg" alt="ngrok"></p><p>将ngrok暴露出的域名复制下来, 然后进入GitHub上指定的项目 –&gt; setting –&gt; WebHooks –&gt; add webhook</p><p><img src="http://images2.imagebam.com/2c/d8/e8/8c8cdd1110652714.jpg" alt="webhook config"></p><p>填写Payload URL为ngrok生成的域名加上/github-webhook/, 并将上一步生成的github token填写到secret中. 点击保存.</p><h2 id="配置Jenkins-Github-Plugin"><a href="#配置Jenkins-Github-Plugin" class="headerlink" title="配置Jenkins Github Plugin"></a>配置Jenkins Github Plugin</h2><hr><p>系统管理 –&gt; 系统设置 –&gt; GitHub –&gt; Add GitHub Sever</p><p><img src="https://upload-images.jianshu.io/upload_images/3087126-c3a4356bb2262e51.png" alt="jenkins github config"></p><p><code>API URL</code> 输入 <code>https://api.github.com</code>，Credentials点击Add添加，选择Secret Text，如下图</p><p><img src="https://upload-images.jianshu.io/upload_images/2518611-547c6e295e263296.png" alt="add secret"></p><p>设置完成后, 点击<code>TestConnection</code>, 提示<code>Credentials verified for user UUserName, rate limit: xxx</code>, 则表明有效</p><h2 id="创建流水线"><a href="#创建流水线" class="headerlink" title="创建流水线"></a>创建流水线</h2><hr><p>在Jenkins管理主页面点击新建任务选项, 选择新建pipeline</p><p><img src="http://images2.imagebam.com/cc/38/02/eae83a1110670344.jpg" alt="create pipeline"></p><p>选择触发器<code>GitHub hook trigger for GITScm polling</code>，这样每次push代码都会触发Jenkins自动构建.</p><p><img src="https://upload-images.jianshu.io/upload_images/3087126-ff7a204110da8f26.png" alt="github repo config"></p><p>选择<code>pipeline script from scm</code>, scm选择<code>git</code>然后在<code>Repository URL</code>中填入项目地址.</p><p><img src="http://images2.imagebam.com/c1/96/07/22df9d1110680084.jpg" alt="repo address"></p><p>最后点击保存.</p><h2 id="添加Jenkinsfile"><a href="#添加Jenkinsfile" class="headerlink" title="添加Jenkinsfile"></a>添加Jenkinsfile</h2><hr><p>最后需要在本地代码库添加Jenkinsfile指定流水线的运行步骤. 默认需要将Jenkinsfile放置在代码根目录下. 文件内容如下</p><pre class=" language-groovy"><code class="language-groovy">pipeline <span class="token punctuation">{</span>    agent any    stages <span class="token punctuation">{</span>        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'Test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            steps <span class="token punctuation">{</span>                sh <span class="token string">'./gradlew test'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'Build'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            steps <span class="token punctuation">{</span>                sh <span class="token string">'./gradlew clean build'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后将代码push到github, 便能够看到Jenkins自动运行流水线.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactiveX学习</title>
      <link href="/2018/12/17/ReactiveX%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/12/17/ReactiveX%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>ReactiveX是Reactive Extensions的缩写，一般简写为Rx。Rx是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流，Rx库支持.NET、JavaScript和C++，Rx近几年越来越流行了，现在已经支持几乎全部的流行编程语言了。社区网站是 <a href="http://reactivex.io/" target="_blank" rel="noopener">ReactiveX</a> 。</p><a id="more"></a><h2 id="ReactiveX操作符"><a href="#ReactiveX操作符" class="headerlink" title="ReactiveX操作符"></a>ReactiveX操作符</h2><hr><h3 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h3><p>为特定的目标创建一个Observable对象并发射该对象到流中.</p><p>与From操作符类似, 但From操作符会将可迭代的数组中的元素取出来组合成数据流, 而Just则将数组对象整体发射到数据流.</p><p><img src="http://images2.imagebam.com/ee/b4/dd/94a3f21095224544.png" alt="Just"></p><h3 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h3><p>创建一个在固定时间间隔内, 持续发射一个无穷的整数序列的Observable对象</p><p><img src="http://images2.imagebam.com/21/79/a6/9c5d291095224594.png" alt="Interval"></p><h3 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h3><p>转换被Observable对象发射的对象为Observables对象, 然后展开Observables对象为单个的Observable对象.</p><p><img src="http://reactivex.io/documentation/operators/images/flatMap.c.png" alt="FlatMap"></p><h3 id="subscribeOn与observeOn"><a href="#subscribeOn与observeOn" class="headerlink" title="subscribeOn与observeOn"></a>subscribeOn与observeOn</h3><p>subscribeOn与observeOn操作符都用于切换线程. </p><ol><li>subscribeOn的调用会切换之前的线程</li><li>observeOn的调用会切换之后的线程</li><li>observeOn之后调用subscribeOn无效</li></ol><p>eg:</p><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span>map                    <span class="token comment" spellcheck="true">// 操作1</span><span class="token punctuation">.</span>flatMap                <span class="token comment" spellcheck="true">// 操作2</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span><span class="token punctuation">.</span>map                    <span class="token comment" spellcheck="true">//操作3</span><span class="token punctuation">.</span>flatMap                <span class="token comment" spellcheck="true">//操作4</span><span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">.</span>map                    <span class="token comment" spellcheck="true">//操作5</span><span class="token punctuation">.</span>flatMap                <span class="token comment" spellcheck="true">//操作6</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//!!特别注意</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>handleData<span class="token punctuation">)</span></code></pre><ol><li>操作1，操作2是在io线程上，因为之后subscribeOn切换了线程</li><li>操作3，操作4也是在io线程上，因为在subscribeOn切换了线程之后，并没有发生改变。</li><li>操作5，操作6是在main线程上，因为在他们之前的observeOn切换了线程。</li><li>特别注意那一段，对于操作5和操作6是无效的</li></ol>]]></content>
      
      
      <categories>
          
          <category> ReactiveX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava </tag>
            
            <tag> ReactiveX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular入门</title>
      <link href="/2018/11/29/angular%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/29/angular%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化Angular项目"><a href="#初始化Angular项目" class="headerlink" title="初始化Angular项目"></a>初始化Angular项目</h2><hr><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li>nodejs</li><li>npm</li></ul><a id="more"></a><h3 id="安装Angular-CLI"><a href="#安装Angular-CLI" class="headerlink" title="安装Angular CLI"></a>安装Angular CLI</h3><p>在使用Angular CLI初始化Angular项目前, 需要全局安装Angular CLI: </p><blockquote><p> npm install -g @angular/cli</p></blockquote><h3 id="创建工作区"><a href="#创建工作区" class="headerlink" title="创建工作区"></a>创建工作区</h3><p>使用Angular CLI创建angular项目工作目录</p><blockquote><p>ng new angular-app</p></blockquote><p>创建好之后, 工作区包含了:</p><ol><li>一个命名为angular-app的新的工作区</li><li>在/src目录下,初始化的项目架构</li><li>一个end-to-end测试项目(/e2e目录)</li><li>相关的配置文件</li></ol><p>该工作区初始化完成后为Welcome app, 直接可以运行</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>工作区初始化完毕之后, 可以使用Angular CLI命令本地启动该项目.</p><p>首先到工作区目录下, 然后运行以下命令:</p><blockquote><p>ng serve –open</p></blockquote><p>使用该方式启动项目后, 会监测你的代码变动, 一旦有更新, 项目会重新构建, 前端页面也会显示最新的变动.</p><h2 id="工作区目录文件解析"><a href="#工作区目录文件解析" class="headerlink" title="工作区目录文件解析"></a>工作区目录文件解析</h2><hr><p>在初识化项目中, 包含了许多工作区级别的配置文件, 本节将简要介绍每个文件的作用.</p><table><thead><tr><th>工作区配置文件</th><th>目的</th></tr></thead><tbody><tr><td>.editorconfig</td><td>编辑器的相应配置(缩进, 编码, 换行符等), 参考 <a href="https://editorconfig.org/" target="_blank" rel="noopener">EditorConfig</a>.</td></tr><tr><td>.gitignore</td><td>git仓库的忽略文件列表</td></tr><tr><td>angular.json</td><td>项目中默认的CLI配置, 包含了构建, 启动和测试的配置选项, 参考<a href="https://angular.io/guide/workspace-config" target="_blank" rel="noopener">Angular项目配置</a>.</td></tr><tr><td>node_modules</td><td>npm本地包的存放位置</td></tr><tr><td>package.json</td><td>npm包依赖配置文件</td></tr><tr><td>tsconfig.json</td><td>当前项目默认的TypeScript配置, 参考<a href="https://angular.io/guide/typescript-configuration" target="_blank" rel="noopener">TypeScript Configuration</a>.</td></tr><tr><td>tslint.json</td><td>默认的tslint代码检查配置文件</td></tr><tr><td>README.md</td><td>项目的介绍文档</td></tr></tbody></table><p>在该工作区的所有项目会共享<a href="https://angular.io/guide/workspace-config" target="_blank" rel="noopener">CLI配置上下文</a>,某个特定项目的TypeScript, TSLint配置文件会继承上级的tsconfig.*.json, tsline.json.</p><p>src目录下包含了主要的源文件(app逻辑, 数据, 和assets), 以及初识的项目配置文件</p><table><thead><tr><th style="text-align:left">app源/配置文件</th><th>目的</th></tr></thead><tbody><tr><td style="text-align:left">app/</td><td>包含了项目中的组件文件, 即项目的主要逻辑和数据定义.参考<a href="https://angular.io/guide/file-structure#app-src" target="_blank" rel="noopener">App source folder</a></td></tr><tr><td style="text-align:left">assets/</td><td>包含了在构建app时需要拷贝的图像或其他资源文件</td></tr><tr><td style="text-align:left">environments/</td><td>包含了为不同环境的不同构建配置选项</td></tr><tr><td style="text-align:left">browserlist</td><td>配置各种前端工具之间的目标浏览器和node.js版本的共享.参考<a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">Browserlist on GitHub</a></td></tr><tr><td style="text-align:left">favicon.ico</td><td>在浏览器书签栏的图标</td></tr><tr><td style="text-align:left">index.html</td><td>入口HTML页面. 当构建项目时, Angular CLI会自动添加所有js/ts和css文件到该文件下</td></tr><tr><td style="text-align:left">main.ts</td><td>项目的入口点,默认使用<a href="https://angular.io/guide/glossary#jit" target="_blank" rel="noopener">JIT编译器</a>编译应用程序, 并引导程序的根模块在浏览器中运行, 也可以使用<code>—aot</code>参数让项目通过<a href="https://angular.io/guide/aot-compiler" target="_blank" rel="noopener">AOT编译器</a></td></tr><tr><td style="text-align:left">polyfills.ts</td><td>提供用于浏览器支持的polyfill脚本</td></tr><tr><td style="text-align:left">styles.scss</td><td>列出为项目提供样式的CSS文件,扩展名反映了您为项目配置的样式预处理器。</td></tr><tr><td style="text-align:left">test.ts</td><td>单元测试的入口点, 具有部分Angular特定的配置</td></tr></tbody></table><p>e2e目录下存放了e2e测试相关文件:</p><pre><code>my-app/  e2e/                  (端到端测试文件)    src/                (app source files)    protractor.conf.js  (test-tool config)    tsconfig.e2e.json   (TypeScript config inherits from workspace tsconfig.json)</code></pre><p>Project目录下存放了其他的apps和libs</p><pre><code>  projects/           (additional apps and libs)    my-other-app/     (a second app)      src/      (config files)    my-other-app-e2e/  (corresponding test app)       src/      (config files)    my-lib/            (a generated library)      (config files)</code></pre><p>在src/文件夹中, app/文件夹包含应用程序的逻辑和数据, 组件, 模板和样式在这里. 资产/子文件夹包含图像以及您的应用所需的任何其他内容.  src/ support顶层的文件测试和运行你的应用程序. </p><table><thead><tr><th>app源文件</th><th>目的</th></tr></thead><tbody><tr><td>app/app.component.ts</td><td>定义应用程序根组件的逻辑，名为AppComponent。在向应用程序添加组件和服务时，与此根组件关联的视图将成为视图层次结构的根。</td></tr><tr><td>app/app.component.html</td><td>定义与根AppComponent关联的HTML模板。</td></tr><tr><td>app/app.component.css</td><td>定义根AppComponent的基本CSS样式表。</td></tr><tr><td>app/app.component.spec.ts</td><td>定义根AppComponent的单元测试。</td></tr><tr><td>app/app.module.ts</td><td>定义名为AppModule的根模块，它告诉Angular如何组装应用程序。最初只声明AppComponent。当您向应用添加更多组件时，必须在此处声明它们。</td></tr><tr><td>assets/*</td><td>包含要在构建应用程序时按原样复制的图像文件和其他资源文件。</td></tr><tr><td></td></tr></tbody></table><h2 id="Angular-API"><a href="#Angular-API" class="headerlink" title="Angular API"></a>Angular API</h2><hr><h3 id="Input与Output"><a href="#Input与Output" class="headerlink" title="Input与Output"></a>Input与Output</h3><p>Input将父作用域的值“输入”到子作用域中，然后子作用域进行相关处理。</p><p>Output相当于指令的方法绑定，子作用域触发事件执行响应函数，而响应函数方法体则位于父作用域中，相当于将事件“输出到”父作用域中，在父作用域中处理。</p><p>example:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//app.component.html</span><span class="token operator">&lt;</span>app<span class="token operator">-</span>child <span class="token punctuation">[</span>values<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"data"</span> <span class="token punctuation">(</span>childEvent<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"getChildEvent($event)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>child<span class="token operator">></span><span class="token comment" spellcheck="true">//app.component.ts</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span> selector<span class="token punctuation">:</span> <span class="token string">'app-root'</span><span class="token punctuation">,</span> templateUrl<span class="token punctuation">:</span> <span class="token string">'./app.component.html'</span><span class="token punctuation">,</span> styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./app.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">getChildEvent</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//app-child.component.html</span><span class="token operator">&lt;</span>p <span class="token operator">*</span>ngFor<span class="token operator">=</span><span class="token string">"let item of values; let i = index"</span> <span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"fireChildEvent(i)"</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token comment" spellcheck="true">//app-child.component.ts</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span> selector<span class="token punctuation">:</span> <span class="token string">'app-child'</span><span class="token punctuation">,</span> templateUrl<span class="token punctuation">:</span> <span class="token string">'./child.component.html'</span><span class="token punctuation">,</span> styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./child.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ChildComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span> @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> values<span class="token punctuation">;</span> @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> childEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token function">fireChildEvent</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>childEvent<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="NgModal-与-NgModal"><a href="#NgModal-与-NgModal" class="headerlink" title="[NgModal]与[(NgModal)]"></a>[NgModal]与[(NgModal)]</h3><p>[(NgModal)]是Angular的双向绑定语法, [NgModal]则是单向绑定,<code>[(ngModel)]=&quot;overRideRate&quot;</code> 相当于是<code>[ngModel]=&quot;overRideRate&quot;  (ngModelChange)=&quot;overRideRate = $event&quot;</code></p><p>Note: 当使用[(NgModal)]绑定input时, 需要在对应的app.module.ts文件下添加FormsModule:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>FormsModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span><span class="token operator">...</span>    imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token operator">...</span>          FormsModule    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">...</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript入门</title>
      <link href="/2018/11/28/TypeScript%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/28/TypeScript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>TypeScript是JavaScript的超集, TypeScript可以兼容JavaScript, TypeScript通过类型注解提供编译时的静态类型检查. TypeScript可以处理已有的JavaScript代码, 并只对TypeScript代码进行编译.</p><a id="more"></a><h2 id="语法特性"><a href="#语法特性" class="headerlink" title="语法特性"></a>语法特性</h2><hr><ul><li>类 classes</li><li>接口 interfaces</li><li>模块 modules</li><li>类型注解 type annotations</li><li>编译时类型检查 compile time type checking</li><li>Arrow函数</li></ul><h2 id="类型批注"><a href="#类型批注" class="headerlink" title="类型批注"></a>类型批注</h2><hr><p>example:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Add</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>TypeScript可以忽略类型批注, 基本类型的批注为<code>number, bool, string</code>, 弱类型或动态类型结构则是<code>any</code>类型.</p><p>enum:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span><span class="token keyword">let</span> colorName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//colorName = 'Green'</span></code></pre><p>enum默认从0开始, 也可以指定成员的值</p><p>any和Object的区别:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure<span class="token punctuation">.</span><span class="token function">ifItExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, ifItExists might exist at runtime</span>notSure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, toFixed exists (but the compiler doesn't check)</span><span class="token keyword">let</span> prettySure<span class="token punctuation">:</span> Object <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>prettySure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: Property 'toFixed' doesn't exist on type 'Object'.</span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><hr><p>example:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    width<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>shape<span class="token punctuation">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> area <span class="token operator">=</span> shape<span class="token punctuation">.</span>width <span class="token operator">*</span> shape<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"I'm"</span> <span class="token operator">+</span> shape<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" with area "</span> <span class="token operator">+</span> area <span class="token operator">+</span> <span class="token string">" cm squared"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"rectangle"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接口可以作为一个类型批注</p><p>在interface中的字段后方加入<code>?</code>符号表示该字段在interface可为空.</p><h2 id="箭头函数表达式-lambda表达式"><a href="#箭头函数表达式-lambda表达式" class="headerlink" title="箭头函数表达式(lambda表达式)"></a>箭头函数表达式(lambda表达式)</h2><hr><p>lambda表达式:<code>()=&gt;{something}或()=&gt;something</code>相当于js中的函数, 它的好处是可以自动将函数中的this附加到上下文中.</p><p>example:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">var</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"rectangle"</span><span class="token punctuation">,</span>    popup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This inside popup(): '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This inside setTimeout(): '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为:I'm a !</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This inside setTimeout(): '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为:I'm a rectangle!  </span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>shape<span class="token punctuation">.</span><span class="token function">popup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><hr><p>TypeScript支持集成了可选的类型批注支持的ECMAScript 6的类</p><p>example:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    area<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span> <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"pink"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">shoutout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"I'm "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span>  <span class="token string">" with an area of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">+</span> <span class="token string">" cm squared."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token string">"square"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> square<span class="token punctuation">.</span><span class="token function">shoutout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'Area of Shape: '</span> <span class="token operator">+</span> square<span class="token punctuation">.</span>area <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'Name of Shape: '</span> <span class="token operator">+</span> square<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'Color of Shape: '</span> <span class="token operator">+</span> square<span class="token punctuation">.</span>color <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报warning</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'Width of Shape: '</span> <span class="token operator">+</span> square<span class="token punctuation">.</span>width <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'Height of Shape: '</span> <span class="token operator">+</span> square<span class="token punctuation">.</span>height <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><hr><p>使用<code>extends</code>创建派生类</p><p>example:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Shape3D</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    volume<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span> <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>volume <span class="token operator">=</span> length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">shoutout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"I'm "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span>  <span class="token string">" with a volume of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>volume <span class="token operator">+</span> <span class="token string">" cm cube."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">superShout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shoutout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape3D</span><span class="token punctuation">(</span><span class="token string">"cube"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> cube<span class="token punctuation">.</span><span class="token function">shoutout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> cube<span class="token punctuation">.</span><span class="token function">superShout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clean code 学习笔记</title>
      <link href="/2018/11/13/clean-code-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/11/13/clean-code-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h2><hr><h3 id="名副其实"><a href="#名副其实" class="headerlink" title="名副其实"></a>名副其实</h3><ul><li>使用能够表达本意的名称</li><li>发现更好的名称就替换旧名称</li></ul><a id="more"></a><h3 id="避免误导"><a href="#避免误导" class="headerlink" title="避免误导"></a>避免误导</h3><ul><li>避免使用其他领域的常用名称<ul><li>hp, aix, sco为UNIX平台专有名词</li><li>List对程序员有特殊含义</li></ul></li><li>提防使用差异很小的名称</li><li>避免使用消息字母l, 大写字母O作为变量名</li></ul><h3 id="做有意义的区分"><a href="#做有意义的区分" class="headerlink" title="做有意义的区分"></a>做有意义的区分</h3><ul><li>避免混合使用Product, ProductInfo, ProductData这类名称不同,意义相同的类名</li></ul><h3 id="使用读得出来的名称"><a href="#使用读得出来的名称" class="headerlink" title="使用读得出来的名称"></a>使用读得出来的名称</h3><ul><li>避免自造词</li></ul><h3 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h3><ul><li>单字母名称和数字常量可能在代码中多处使用, 应赋予其便于搜索的名称</li></ul><h3 id="避免使用编码"><a href="#避免使用编码" class="headerlink" title="避免使用编码"></a>避免使用编码</h3><ul><li>匈牙利语标法</li><li>成员前缀</li><li>接口和实现<ul><li>宁愿实现编码也要避免接口编码</li></ul></li></ul><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><ul><li>类名和对象名应该是名字或名词短语</li><li>类名不应该是动词</li></ul><h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><ul><li>方法名应该是动词和动词短语</li><li>属性访问器, 修改器和断言应该使用get, set, is并根据其值命名</li></ul><h3 id="别扮可爱"><a href="#别扮可爱" class="headerlink" title="别扮可爱"></a>别扮可爱</h3><ul><li>避免使用俗话和俚语</li></ul><h3 id="每个概念对应一个词"><a href="#每个概念对应一个词" class="headerlink" title="每个概念对应一个词"></a>每个概念对应一个词</h3><ul><li>同一概念同一使用一个词</li><li>避免使用近义词表示同一概念</li></ul><h3 id="别用双关语"><a href="#别用双关语" class="headerlink" title="别用双关语"></a>别用双关语</h3><ul><li>一个词不能对应多个不同概念</li></ul><h3 id="使用解决方案领域名称优先于所涉问题领域名称"><a href="#使用解决方案领域名称优先于所涉问题领域名称" class="headerlink" title="使用解决方案领域名称优先于所涉问题领域名称"></a>使用解决方案领域名称优先于所涉问题领域名称</h3><ul><li>优先使用计算机科学术语</li><li>无法使用程序员熟悉的术语, 再采用所涉问题领域的名称</li></ul><h3 id="添加有意义的语境"><a href="#添加有意义的语境" class="headerlink" title="添加有意义的语境"></a>添加有意义的语境</h3><ul><li>使用命名良好的类, 函数或名称空间放置名称</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><h3 id="短小"><a href="#短小" class="headerlink" title="短小"></a>短小</h3><ul><li>函数应该尽量短小(3-4行)</li><li>缩进层级不应该多余一层或两层</li></ul><h3 id="只做一件事"><a href="#只做一件事" class="headerlink" title="只做一件事"></a>只做一件事</h3><ul><li>一件事: 函数只做了函数名下同一抽象层上的步骤</li><li>如果还能再拆出一个函数, 该函数不仅是单纯的重新诠释其实现, 则该函数不止做了一件事</li><li>函数能被切分为多个<strong>区段</strong>, 便是函数做事太多的征兆</li></ul><h3 id="每个函数一个抽象层级"><a href="#每个函数一个抽象层级" class="headerlink" title="每个函数一个抽象层级"></a>每个函数一个抽象层级</h3><ul><li>自顶向下读代码: 向下规则. 让每个函数后面都跟着位于下一抽象层级的函数, 这样一来, 在查看函数列表时, 就能循抽象层级向下阅读了.</li></ul><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><ul><li>使用多态实现,将switch埋藏在较低的抽象层级, 而且永远不重复.</li></ul><p>一般代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Money <span class="token function">calculatePay</span><span class="token punctuation">(</span>Employee e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidEmployeeType <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> COMMISSIONED<span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">calculateCommissionedPay</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HOURLY<span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">calculateHourlyPay</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SALARIED<span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">calculateSalariedPay</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidEmployeeType</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用抽象工厂隐藏switch语句:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isPayday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Money <span class="token function">calculatePay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">deliverPay</span><span class="token punctuation">(</span>Money pay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Empolyee <span class="token function">makeEmployee</span><span class="token punctuation">(</span>EmployeeRecord r<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidEmmployeeType<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeFactoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmployeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Employee <span class="token function">makeEmployee</span><span class="token punctuation">(</span>EmployeeRecord r<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidEmployeeType <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> COMMISSIONED<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommissionedEmployee</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> HOURLY<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SALARIED<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidEmployeeType</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="使用描述性的名称"><a href="#使用描述性的名称" class="headerlink" title="使用描述性的名称"></a>使用描述性的名称</h3><ul><li>长而具有描述性的名称, 比短而令人费解的名称好</li><li>命名方式要保持一致</li></ul><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul><li>参数数量越少越好, 应该尽量避免三或三个以上参数</li><li>参数不易对付, 带有太多概念性</li><li>参数增加,测试难度也会增加</li><li>尽量避免标识参数(boolean)</li><li>如果函数看来需要多个参数(2个以上), 考虑将其中一些参数封装为类</li></ul><h3 id="无副作用"><a href="#无副作用" class="headerlink" title="无副作用"></a>无副作用</h3><ul><li>函数对自己类中的变量作出未能预期的变动</li><li>尽量避免使用输出参数. 修改所属对象的状态作为替代</li></ul><h3 id="分隔指令与询问"><a href="#分隔指令与询问" class="headerlink" title="分隔指令与询问"></a>分隔指令与询问</h3><ul><li>函数要么做什么事, 要么回答什么事, 二者不可得兼</li></ul><h3 id="使用异常替代返回错误码"><a href="#使用异常替代返回错误码" class="headerlink" title="使用异常替代返回错误码"></a>使用异常替代返回错误码</h3><ul><li>Try/catch代码块丑陋不堪, 最好把try和catch代码块的主体部分抽离出来, 另外形成函数</li></ul><h3 id="去除重复代码"><a href="#去除重复代码" class="headerlink" title="去除重复代码"></a>去除重复代码</h3><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><hr><p>注释是弥补我们在用代码表达意图时遭遇的失败, 代码时刻在变动, 而注释往往不会跟着代码变动, 因此容易造成注释越来越不准确.</p><ul><li>注释无法美化糟糕的代码</li><li>用代码来阐述</li></ul><h3 id="好注释"><a href="#好注释" class="headerlink" title="好注释"></a>好注释</h3><ul><li><p>法律信息</p><blockquote><p>Copyright (C) 2003, 2004, 2005 by Object Mentor, Inc. All rights reserved.</p></blockquote></li><li><p>提供信息的注释</p><blockquote><p>//format matched kk:mm:ss EEE, MMM dd, yyyy</p><p>Pattern timeMatcher = Pattern.compile(“\\d*:\\d*:\\d*  \\w*, \\w* \\d*, \\d*“)</p></blockquote></li><li><p>对意图的解释</p></li><li><p>阐释</p></li><li><p>警示</p></li><li><p>TODO注释</p></li><li><p>公共API的Javadoc</p></li></ul><h3 id="怀注释"><a href="#怀注释" class="headerlink" title="怀注释"></a>怀注释</h3><ul><li><p>喃喃自语</p></li><li><p>多余的注释</p></li><li><p>误导性注释</p></li><li><p>循规式注释</p></li><li><p>日志式注释</p></li><li><p>废话注释</p></li><li><p>能用函数或变量时别用注释</p><blockquote><p>//does the module from the global list <mod> depend on the</mod></p><p>//subsystem we are part of?</p><p>if (smodule.getDependSubsystems().contains(subSysMod.getSubsystem())</p><p>>>></p><p>&lt;&lt;&lt;</p><p>ArrayList moduleDependees = smodule.getDependSubsystems();</p><p>String ourSubSystem = subSysMod.getSubSystem();</p><p>if(moduleDependees.contains(ourSubSystem))</p></blockquote></li><li><p>位置标记</p></li><li><p>括号后的注释</p></li><li><p>归属与署名</p></li><li><p>注释掉的代码</p></li><li><p>HTML注释</p></li><li><p>非本地信息</p></li><li><p>信息过多</p></li><li><p>联系不明显</p></li></ul><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><hr><h3 id="垂直格式"><a href="#垂直格式" class="headerlink" title="垂直格式"></a>垂直格式</h3><ul><li>短文件通常比长文件易于理解</li><li>概念间(封包声明, 导入声明, 每个函数)添加垂直方向的区隔</li><li>相关联的代码应该相互靠近</li><li>本地变量放置在函数的顶部</li><li>实体变量应该在类的顶部声明</li><li>调用函数放在临近被调用函数上方</li><li>执行相似操作的一组函数应该放置在一起</li></ul><h3 id="横向格式"><a href="#横向格式" class="headerlink" title="横向格式"></a>横向格式</h3><ul><li>上限120字符(不超过屏幕宽度)</li><li>不需要水平对齐</li></ul><h3 id="遵从团队规则"><a href="#遵从团队规则" class="headerlink" title="遵从团队规则"></a>遵从团队规则</h3><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><hr><h3 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h3><p>使用数据抽象隐藏实现细节. 隐藏实现并非只是在变量之间放上一个函数层那么简单. 隐藏实现关乎抽象! 类并不简单的使用取值器和赋值器将其变量推向外面, 而是暴露抽象接口, 以便用户无需了解数据的实现就能够操作数据本体.</p><p>具象点:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>抽象点:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setCartesian</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">getR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">getTheta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setPolar</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数据-对象的反对称性"><a href="#数据-对象的反对称性" class="headerlink" title="数据, 对象的反对称性"></a>数据, 对象的反对称性</h3><ul><li>对象吧数据隐藏于抽象之后, 暴露操作数据的函数</li><li>数据结构暴露数据, 没有提供有意义的函数</li></ul><p>过程式形状代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Point topLeft<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Point topLeft<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">[</span>    <span class="token keyword">public</span> Point center<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> redius<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Geometry</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span>Object shape<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchShapeException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Square</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Square s <span class="token operator">=</span> <span class="token punctuation">(</span>Square<span class="token punctuation">)</span>shape<span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>side <span class="token operator">*</span> s<span class="token punctuation">.</span>side<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Rectangle r <span class="token operator">=</span> <span class="token punctuation">(</span>Rectangle<span class="token punctuation">)</span>shape<span class="token punctuation">;</span>            <span class="token keyword">return</span> r<span class="token punctuation">.</span>height <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Circle c <span class="token operator">=</span> <span class="token punctuation">(</span>Circle<span class="token punctuation">)</span>shape<span class="token punctuation">;</span>            <span class="token keyword">return</span> PI <span class="token operator">*</span> c<span class="token punctuation">.</span>radius <span class="token operator">*</span> c<span class="token punctuation">.</span>radius<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchShapeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>多态式形状:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Point topLeft<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> side <span class="token operator">*</span> side<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Point topLeft<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> height <span class="token operator">*</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Point center<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> redius<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><em>过程式代码(使用数据结构的代码)便于在不改动既有数据结构的前提下添加新函数, 面对对象代码便于在不改动既有函数的前提下添加新类.</em></strong></p><p>或</p><p><strong><em>过程式代码难以添加新数据结构, 因为必须修改所有函数. 面向对象代码难以添加新函数, 因为必须修改所有类.</em></strong></p><h3 id="得墨忒尔律"><a href="#得墨忒尔律" class="headerlink" title="得墨忒尔律"></a>得墨忒尔律</h3><p>模块不应该了解它所操作对象的内部情况, 类C的方法f只应该调用以下对象的方法:</p><ul><li>C</li><li>由f创建的对象</li><li>作为参数传递给f的对象</li><li>由C的实体变量持有的对象</li></ul><p>违反德墨忒尔律的典型案例:</p><blockquote><p>final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</p></blockquote><h3 id="数据传送对象"><a href="#数据传送对象" class="headerlink" title="数据传送对象"></a>数据传送对象</h3><p>最为精炼的数据结构, 是一个只有公共变量, 没有函数的类. 这种数据结构有时被称为数据传送对象, 或DTO(Data Transfer Objects). DTO是非常有用的结构, 尤其是在于数据库通信或解析套接字传递的消息场景中.</p><p>另一种更常见的结构为bean结构, 该结构由赋值器和取值器操作的私有变量. 不过该结构相比于DTO并没有实质性的好处.</p><p>Active Record 是一种特殊的DTO形式. 它拥有公共(或可豆式访问的)变量的数据结构, 但通常也会拥有类似save和find这样的可浏览方法.</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><hr><p>错误处理很重要, <strong>但是如果错误处理搞乱了代码逻辑, 就是错误的做法</strong></p><ul><li>使用异常而非返回码</li><li>先写try/catch/finally语句</li><li>使用不可控异常</li><li>对异常发生的环境进行说明</li><li>依据调用者需要定义异常类</li><li>定义常规流程</li><li>别返回, 传递null值</li></ul><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><hr><h3 id="使用第三方代码"><a href="#使用第三方代码" class="headerlink" title="使用第三方代码"></a>使用第三方代码</h3><p>以java.util.Map为例, 应用程序需要一个包容Sensor对象的Map映射图, 大概是这样:</p><pre class=" language-java"><code class="language-java">Map sensors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sensor s <span class="token operator">=</span> <span class="token punctuation">(</span>Sensor<span class="token punctuation">)</span>sensors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sensorId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码的调用端承担了Map中取得对象并将其转化为正确类型的职责, 且Map暴露的接口可能会超出应用程序的期望(不希望删除).</p><p>更整洁的方式大致如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sensors</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map sensors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Sensor <span class="token function">getById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Sensor<span class="token punctuation">)</span> sensors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="浏览和学习第三方库"><a href="#浏览和学习第三方库" class="headerlink" title="浏览和学习第三方库"></a>浏览和学习第三方库</h3><p><strong>学习性测试</strong>: 不要在生产代码中实验新东西, 而是编写测试来理解第三方代码.</p><ul><li>学习性测试时一种精确实验, 班组我们增进对api的理解</li><li>当第三方程序包发布新版本, 可以运行学习性测试, 查看程序包的行为有没有改变</li><li>第三方程序包的修改和测试不兼容时, 能够马上发现</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><hr><h3 id="TDD三定律"><a href="#TDD三定律" class="headerlink" title="TDD三定律"></a>TDD三定律</h3><ul><li>在编写不能通过的单元测试前, 不能编写生产代码</li><li>只可编写刚好无法通过的单元测试, 不能编译也算不通过</li><li>只可编写刚好足以通过当前失败测试的生产代码</li></ul><h3 id="保持测试整洁"><a href="#保持测试整洁" class="headerlink" title="保持测试整洁"></a>保持测试整洁</h3><p><strong>测试代码与生产代码同样重要</strong></p><ul><li>单元测试让生产代码可扩展, 可维护, 可复用</li><li>有了测试, 就不用担心对代码的修改</li></ul><p>测试整洁的要素在于<strong>可读性</strong>, 明确, 简洁, 还有足够的表达力. 整洁的测试中不应该包含太多细节, 应该呈现出构造-操作-检验(BUILD-OPERATE-CHECK)模式.</p><p>整洁的代码还遵循以下5条规则(F.I.R.S.T):</p><ul><li>快速(Fast)</li><li>独立(independent)</li><li>可重复(Repeatable)</li><li>自足验证(Self-Validating)</li><li>及时(Timely)</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><hr><h3 id="类应该短小"><a href="#类应该短小" class="headerlink" title="类应该短小"></a>类应该短小</h3><p>通过权责(responsibility)衡量类的大小</p><ul><li>单一权责原则</li><li>内聚<ul><li>类应该只有少量实体变量</li><li>类中的每个方法都应该操作一个或多个这种变量</li><li>通常方法操作的变量越多, 该类具有越大的内聚性</li></ul></li></ul><h3 id="组织类结构来避免修改"><a href="#组织类结构来避免修改" class="headerlink" title="组织类结构来避免修改"></a>组织类结构来避免修改</h3><p>希望将系统打造成在添加或修改特性时尽可能少惹麻烦的架子. 在理想系统中, 我们通过<strong>扩展系统</strong>而非修改现有代码来添加新特性.</p><h3 id="隔离修改"><a href="#隔离修改" class="headerlink" title="隔离修改"></a>隔离修改</h3><p>借助接口和抽象类来隔离实现细节修改带来的影响.</p><p>依赖倒置原则(Dependency Inversion Principle, DIP), 类应当依赖于抽象而不是依赖于具体细节.</p>]]></content>
      
      
      <categories>
          
          <category> 代码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Data-Java-8-Support</title>
      <link href="/2018/11/12/Spring-Data-Java-8-Support/"/>
      <url>/2018/11/12/Spring-Data-Java-8-Support/</url>
      
        <content type="html"><![CDATA[<p>Spring data support core Java 8 features – such as <em>Optional</em>, <em>Stream</em> API and <em>CompletableFuture</em>.</p><a id="more"></a><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><hr><p>now CrudRepository wrap results in an Optional.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>    Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findOneByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>When returning an <a href="https://www.baeldung.com/java-optional" target="_blank" rel="noopener"><em>Optional</em></a> instance, it’s a useful hint that there’s a possibility that the value might not exist. </p><p>all we need to do is to specify return type as an Optional:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>    Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findOneByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><hr><p>Spring Data also provides the support for the Stream API.</p><p>In the past, whenever we needed to return more than one result, we needed to return a collection, one of the problems with this implementation was the memoory consumption. we had to eagerly load and keep all retrieved objects in it.</p><p>one thing we can do is leveraging paging:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>but it can only work in some scenarios. we can now <strong>define that our repository method returns just a Stream of objects</strong>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAllByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p><strong>Spring Data use provider-specific implementation to stream result.</strong> It reduces the amount of memory comsumption and query calls to a database. Because of that, it’s much faster than two solutions mentioned earlier.</p><p>Processing data with a Stream requires us to close a Stream when we finish it. It can be done calling the close() method on a Stream or by using try-with-resources:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> foundUsersStream   <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAllByName</span><span class="token punctuation">(</span>USER_NAME_ADAM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">assertThat</span><span class="token punctuation">(</span>foundUsersStream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span>3l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Note</strong>: remember to call a repository method within a transaction. Otherwise, we’ll get a exception:</p><blockquote><p><em>org.springframework.dao.InvalidDataAccessApiUsageException</em>: You’re trying to execute a streaming query method without a surrounding transaction that keeps the connection open so that the <em>Stream</em> can actually be consumed. Make sure the code consuming the stream uses <em>@Transactional</em> or any other way of declaring a (read-only) transaction.</p></blockquote><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><hr><p><strong>Spring Data repositories can run asynchronously with the support of Java 8’s CompletableFuture</strong> and Spring mechanism for asynchronous method execution:</p><pre class=" language-java"><code class="language-java">`<span class="token annotation punctuation">@Async</span>``CompletableFuture<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findOneByStatus</span><span class="token punctuation">(</span>Integer status<span class="token punctuation">)</span><span class="token punctuation">;</span>`</code></pre><p>A client which calls this method will return a future immediately but a method will continue an execution in a different thread.</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java 8 </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Togglz tutorials</title>
      <link href="/2018/11/05/Togglz%20tutorials/"/>
      <url>/2018/11/05/Togglz%20tutorials/</url>
      
        <content type="html"><![CDATA[<h2 id="Togglz"><a href="#Togglz" class="headerlink" title="Togglz"></a>Togglz</h2><hr><h3 id="install-dependence"><a href="#install-dependence" class="headerlink" title="install dependence"></a>install dependence</h3><hr><h4 id="for-spring-MVC-development"><a href="#for-spring-MVC-development" class="headerlink" title="for spring MVC development:"></a>for spring MVC development:</h4><p>build.gradle</p><blockquote><p>compile ‘org.togglz:togglz-servlet:2.6.1.Final’<br>compile ‘org.togglz:togglz-spring-web:2.6.1.Final’<br>runtime ‘org.togglz:togglz-jsp:2.6.1.Final’<br>compile ‘org.togglz:togglz-console:2.6.1.Final’</p></blockquote><a id="more"></a><h4 id="for-spring-boot-development"><a href="#for-spring-boot-development" class="headerlink" title="for spring boot development:"></a>for spring boot development:</h4><p>build.gradle</p><h5 id="2-x"><a href="#2-x" class="headerlink" title="2.x:"></a>2.x:</h5><blockquote><p>compile(“org.togglz:togglz-spring-boot-starter:2.6.1.Final”)</p></blockquote><h5 id="1-x"><a href="#1-x" class="headerlink" title="1.x:"></a>1.x:</h5><blockquote><p>compile(“org.togglz:togglz-legacy-spring-boot-starter:2.6.1.Final”)</p></blockquote><p><strong><em>note</em></strong>: <em>The starter will not only add the <code>togglz-core</code> and <code>togglz-spring-core</code> modules to your project, it will also enable the auto configuration of the Togglz configration.</em></p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><hr><p>Configuring Togglz requires you to implement two classes.</p><h4 id="Feature-definition"><a href="#Feature-definition" class="headerlink" title="Feature definition"></a>Feature definition</h4><p> The first class is the feature enum which declares the features you want to manage with Togglz. This enum is a standard Java enum which implements the <code>Feature</code> interface.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Feature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnabledByDefault<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Label<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span>FeatureContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> MyFeatures <span class="token keyword">implements</span> <span class="token class-name">Feature</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Label</span><span class="token punctuation">(</span><span class="token string">"First Feature"</span><span class="token punctuation">)</span>    FEATURE_ONE<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Label</span><span class="token punctuation">(</span><span class="token string">"Second Feature"</span><span class="token punctuation">)</span>    FEATURE_TWO<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> FeatureContext<span class="token punctuation">.</span><span class="token function">getFeatureManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h4 id="Implementing-TogglzConfig"><a href="#Implementing-TogglzConfig" class="headerlink" title="Implementing TogglzConfig"></a>Implementing TogglzConfig</h4><p>The next step is to configure the <code>FeatureManager</code> which is the central Togglz component that manages the state of your features. To do so, you have to create a class implementing the <code>TogglzConfig</code>.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Feature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>manager<span class="token punctuation">.</span>TogglzConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>StateRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>file<span class="token punctuation">.</span>FileBasedStateRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>user<span class="token punctuation">.</span>FeatureUser<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>user<span class="token punctuation">.</span>UserProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>togglz<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>user<span class="token punctuation">.</span>ServletUserProvider<span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTogglzConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">TogglzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Feature</span><span class="token operator">></span> <span class="token function">getFeatureClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> MyFeatures<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> StateRepository <span class="token function">getStateRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileBasedStateRepository</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"features.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserProvider <span class="token function">getUserProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleFeatureUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Note</strong>:<em>the relative path is direct to the project path(eg. /twu63team2)</em></p><p>features.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">FEATURE_TWO</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">FEATURE_ONE</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p><strong>Important Note</strong>: <em>if you use spring security, it will use <strong>csrf</strong> protection which cause that you can not use togglz admin console to edit the status of feature.</em></p><p><strong>one way</strong> to solve that problem is to <strong>disable the csrf</strong>.(not recommend)</p><p>security-app-context.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>csrf</span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span></code></pre><p><strong>another way</strong> is to import one more dependence in build.gradle</p><blockquote><p>compile ‘org.togglz:togglz-spring-security:2.6.1.Final’</p></blockquote><p>once you import this dependence, when you edit the toggle state in admin console, It will add a csrf token, and it will work!</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><hr><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> MyFeatures<span class="token punctuation">.</span>FEATURE_ONE<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// new stuff here</span><span class="token punctuation">}</span></code></pre><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://togglz.org/taglib<span class="token punctuation">"</span></span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>togglz<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>This is some text that is always shown.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">togglz:</span>feature</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FEATURE_ONE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is the text of the TEXT feature.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">togglz:</span>feature</span><span class="token punctuation">></span></span></code></pre><h3 id="Test-with-togglz"><a href="#Test-with-togglz" class="headerlink" title="Test with togglz"></a>Test with togglz</h3><hr><p>if you use junit for test, you need to add test dependence for togglz in build.gradle</p><blockquote><p>testCompile ‘org.togglz:togglz-junit:2.6.1.Final’</p></blockquote><h4 id="TogglzRule"><a href="#TogglzRule" class="headerlink" title="TogglzRule"></a>TogglzRule</h4><p>The first important feature of the JUnit integration module is the <code>TogglzRule</code>. This rule allows to modify the feature state at runtime. This is especially useful if you want to test a special combination of feature states.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeJunitTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Rule</span>  <span class="token keyword">public</span> TogglzRule togglzRule <span class="token operator">=</span> TogglzRule<span class="token punctuation">.</span><span class="token function">allEnabled</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testToggleFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// all features are active by default  </span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>FEATURE_ONE<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you can easily modify the feature state using the TogglzRule</span>    togglzRule<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>FEATURE_ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>FEATURE_ONE<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Feature-variations"><a href="#Feature-variations" class="headerlink" title="Feature variations"></a>Feature variations</h4><p>The JUnit integration module also allows to run tests with different combination of feature states. This works very similar to JUnit’s <code>@Parameterized</code> annotation.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>FeatureVariations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeatureVariationsTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Variations</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> VariationSet<span class="token operator">&lt;</span>MyFeatures<span class="token operator">></span> <span class="token function">getPermutations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> VariationSetBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>F1<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">vary</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>F2<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">vary</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>F3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// will be executed 4 times</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">assertTrue</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>F1<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">assertTrue</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>F2<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>MyFeatures<span class="token punctuation">.</span>F2<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">assertTrue</span><span class="token punctuation">(</span>MyFeatures<span class="token punctuation">.</span>F3<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>MyFeatures<span class="token punctuation">.</span>F3<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>F1=on, F2=off, F3=off</li><li>F1=on, F2=on, F3=off</li><li>F1=on, F2=off, F3=on</li><li>F1=on, F2=on, F3=on</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> togglz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TWU learning route</title>
      <link href="/2018/10/14/TWU-learning-route/"/>
      <url>/2018/10/14/TWU-learning-route/</url>
      
        <content type="html"><![CDATA[<h3 id="OO-recap"><a href="#OO-recap" class="headerlink" title="OO recap"></a>OO recap</h3><hr><ul><li>use <code>final</code> if the variable never change</li><li>use polymorphism if there are several relevant class<ul><li>use <code>interface</code> if several class has same method</li><li>use inherent if class is a special case of another class</li></ul></li><li>use factory design pattern to create a Object(eg. square -&gt; rectangle )</li></ul><a id="more"></a><h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><hr><p>First write the test case and then the simplest implementation according to the test case, the small step to achieve the code through the test, refactoring the original code, the above steps are repeated several times, and finally complete the project development.</p><h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><hr><ul><li>git add -&gt; add local file to cache</li><li>git commit -&gt; commit file to local repo</li><li>git pull -&gt; pull file from remote repo</li><li>git pull –rebase -&gt; combine commit to one branch </li><li>git rebase —continue -&gt; continue pull after resolve conflicts</li></ul><h3 id="Value-Object"><a href="#Value-Object" class="headerlink" title="Value Object"></a>Value Object</h3><hr><ul><li><strong>same</strong> means that two objects have same value and address</li><li><strong>equal</strong> means that two objects have same value</li><li><code>==</code> to validate object is same or not</li><li>override equals() to validate object is equal or not</li><li>use hashcode when use HashSet, HashMap</li></ul><h3 id="Mocks-and-Stubs"><a href="#Mocks-and-Stubs" class="headerlink" title="Mocks and Stubs"></a>Mocks and Stubs</h3><hr><ul><li>mock focus on behavior, usually don’t have a return value</li><li>stub focus on return value</li><li>inherent test class to create a mock class and override the test method</li><li>use mockito or someother framework to create mocks or stubs</li></ul><h3 id="Application-dojo"><a href="#Application-dojo" class="headerlink" title="Application dojo"></a>Application dojo</h3><hr><p><img src="http://wiki.jikexueyuan.com/project/spring/images/mvc1.png" alt="mvc"></p><p>When accepting an HTTP request (GET/POST/PUT/DELETE), Spring MVC first enters the DispatcherServlet for request distribution, and then passes the message to the Controller layer through HandlerMapping.</p><p> The Controller layer accepts the request message through the corresponding URI and request type, and then transfers To the Service layer to perform related business processing on the input message.</p><p>When the Service performs related business processing, it is necessary to define the entity object Model, the Model corresponds to the corresponding table in the database, exchange data with the database by operating the Repository, and return the data processed by the business logic. Data, that is, after completing the View Resolver, the processed data is handed over to the View layer for page data update and rendering.</p><h3 id="MyBatis-Migrations"><a href="#MyBatis-Migrations" class="headerlink" title="MyBatis Migrations"></a>MyBatis Migrations</h3><hr><p>add dependences to build.gradle</p><blockquote><p>compile ‘org.mybatis:mybatis:3.4.5</p></blockquote><p>use migrate command(go to /migration folder first):</p><ul><li>migrate up/down =&gt; apply/undo migrate file to database</li><li>migrate status =&gt; report current state of the database</li><li>migrate bootstrap =&gt; deal with status of a exist database </li><li>migrate new =&gt; create a new migrate script</li></ul><p>migrate file always contain to part for up and down command, for example:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- // add country of residence to account</span><span class="token comment" spellcheck="true">-- Migration SQL that makes the change goes here.</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> account<span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> country_of_residence <span class="token keyword">CHARACTER VARYING</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- //@UNDO</span><span class="token comment" spellcheck="true">-- SQL to undo the change goes here.</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> account<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> country_of_residence<span class="token punctuation">;</span></code></pre><h3 id="Some-bash-command"><a href="#Some-bash-command" class="headerlink" title="Some bash command"></a>Some bash command</h3><hr><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><ul><li>set -u =&gt; throw error and exit if variable don’t exist</li><li>set -x =&gt; print the command before execute</li><li>set -e =&gt; if any command failed then exit</li></ul><h4 id="if-condition"><a href="#if-condition" class="headerlink" title="if condition"></a>if condition</h4><p>if structure:</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>some test<span class="token operator">></span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token operator">&lt;</span>commands<span class="token operator">></span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>some test<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token keyword">then</span>    <span class="token operator">&lt;</span>different commands<span class="token operator">></span><span class="token keyword">else</span>    <span class="token operator">&lt;</span>other commands<span class="token operator">></span><span class="token keyword">fi</span></code></pre><p>possible operators in if condition:</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>! EXPRESSION</td><td>The EXPRESSION is false.</td></tr><tr><td>-n STRING</td><td>The length of STRING is greater than zero.</td></tr><tr><td>-z STRING</td><td>The lengh of STRING is zero (ie it is empty).</td></tr><tr><td>STRING1 = STRING2</td><td>STRING1 is equal to STRING2</td></tr><tr><td>STRING1 != STRING2</td><td>STRING1 is not equal to STRING2</td></tr><tr><td>INTEGER1 -eq INTEGER2</td><td>INTEGER1 is numerically equal to INTEGER2</td></tr><tr><td>INTEGER1 -gt INTEGER2</td><td>INTEGER1 is numerically greater than INTEGER2</td></tr><tr><td>INTEGER1 -lt INTEGER2</td><td>INTEGER1 is numerically less than INTEGER2</td></tr><tr><td>-d FILE</td><td>FILE exists and is a directory.</td></tr><tr><td>-e FILE</td><td>FILE exists.</td></tr><tr><td>-r FILE</td><td>FILE exists and the read permission is granted.</td></tr><tr><td>-s FILE</td><td>FILE exists and it’s size is greater than zero (ie. it is not empty).</td></tr><tr><td>-w FILE</td><td>FILE exists and the write permission is granted.</td></tr><tr><td>-x FILE</td><td>FILE exists and the execute permission is granted.</td></tr></tbody></table><h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><p>copy files in multi servers through ssh</p><h3 id="Spring-MVC-return-type"><a href="#Spring-MVC-return-type" class="headerlink" title="Spring MVC return type"></a>Spring MVC return type</h3><hr><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span>  </code></pre><p>automatically go to the views/order.jsp to show the web view.</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">show1</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>automatically go to the views/success.jsp to show the web view.</p><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ModelAndView <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"/orderDetail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>automatically go to the views/orderDetail.jsp to show the web view.</p><h3 id="Strategy-Patten"><a href="#Strategy-Patten" class="headerlink" title="Strategy Patten"></a>Strategy Patten</h3><hr><pre class=" language-java"><code class="language-java">Strategy<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>OperationAdd<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationAdd</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>OerationSubstract<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationSubstract</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Strategy strategy<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyPatternDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>      context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationSubstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 - 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 培训 </tag>
            
            <tag> oo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端遇到的坑</title>
      <link href="/2018/09/28/%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2018/09/28/%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><hr><p>对于某个组件,如果同时需要使用connect方法以及withRouter方法,需要将withRouter包裹在connect方法外层,否则withRouter无效.</p><p>eg:<code>export default withRouter(connect(mapStateToProps, mapDispatchToProps(Component))</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd组件使用方式</title>
      <link href="/2018/09/17/antd%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/09/17/antd%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><hr><p>最基本的<a href="https://ant.design/components/table-cn/#header" target="_blank" rel="noopener">Table</a>组件只需要传入columns和datasource属性即可创建, 以下是最简单的一个table示例:</p><a id="more"></a><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Table<span class="token punctuation">,</span> Divider<span class="token punctuation">,</span> Tag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  key<span class="token punctuation">:</span><span class="token operator">...</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  key<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  key<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Table columns<span class="token operator">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span> dataSource<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 columns属性指定表的每一列数据相关的设置, datasource 指定表中的具体数值.</p><p><strong>需要注意在antd中columns和datasource属性必须包含key字段, 若没有改字段, 可使用Table的rowKey属性指定列的主键</strong>,否则会出现各类奇怪的错误.</p><p>在columns数组中, 每个数组元素表示一个column, 其具有render 属性, 可以指定该列的渲染方式. render属性接受一个方法, 可以传入三个参数(text, record, index) text表示当前渲染的元素的<code>dataindex</code>字段的值, record表示当前元素的实例对象, index表示该元素在table中的索引.</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>standardJS</title>
      <link href="/2018/09/06/standardjs/"/>
      <url>/2018/09/06/standardjs/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><p>在dev环境下安装StandardJS:</p><p><code>npm install standard --save-dev</code></p><a id="more"></a><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><hr><p>StandardJS提供了一套简洁的规则对代码格式进行检查,需要注意的是StandardJS的检查规则是不可更改的, 检查时只能够按照其规范进行代码修改. StandardJS完整的规范可以在<a href="https://standardjs.com/rules-zhcn.html#javascript-standard-style" target="_blank" rel="noopener">这里</a>看到. </p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><hr><p>由于我们是将StandardJS安装在dev环境下的,因此我们需要对项目目录下的package.json文件进行相应修改,通过npm run 的方式执行代码检查的命令. 需要配置如下:</p><pre class=" language-json"><code class="language-json">  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"standardCheck"</span><span class="token operator">:</span> <span class="token string">"standard src/**/*.js"</span><span class="token punctuation">,</span>    <span class="token property">"standardFix"</span><span class="token operator">:</span> <span class="token string">"standard --fix"</span>  <span class="token punctuation">}</span></code></pre><p>然后通过<code>npm run standardCheck</code>运行代码检查, 查看检查结果. </p><p>StandardJS提供了自动代码检查工具根据上述配置,可以通过<code>npm run standardFix</code>自动代码格式化,但是该方式的自动代码格式化只能解决部分问题,还有许多格式问题需要手动修改.</p><h2 id="容易遇到的坑"><a href="#容易遇到的坑" class="headerlink" title="容易遇到的坑"></a>容易遇到的坑</h2><hr><p>由于部分第三方插件向全局暴露了变量,因此在使用类似变量(Fetch, Headers, URI …)时,会出现variable is not defined的错误,为了解决该问题,可以在package.json文件中添加相应的配置:</p><pre class=" language-json"><code class="language-json"><span class="token property">"standard"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"fetch"</span><span class="token punctuation">,</span>      <span class="token string">"Headers"</span><span class="token punctuation">,</span>      <span class="token string">"URL"</span><span class="token punctuation">,</span>      ...    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><code>standard</code> 支持最新的 ECMAScript 特性，ES8（ES2017），包括处于 “Stage 4” 仍在提案阶段的特性。但是最新的实验特性无法支持,会报错,为了解决这一问题,standard支持自定义JavaScript解析器,以babel-eslint为例:</p><p><code>npm install babel-eslint --save-dev</code>添加解析器,然后在package.json中添加相应配置:</p><pre class=" language-json"><code class="language-json"><span class="token property">"standard"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> standardJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Basic</title>
      <link href="/2018/09/05/Java-Basic/"/>
      <url>/2018/09/05/Java-Basic/</url>
      
        <content type="html"><![CDATA[<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><hr><p>基本示例:</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Options <span class="token punctuation">{</span>    LIST_ALL_BOOKS<span class="token punctuation">,</span>    RETURN_BOOK<span class="token punctuation">,</span>    QUIT<span class="token punctuation">}</span></code></pre><p>可继承的方法：</p><table><thead><tr><th>返回类型</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>compareTo(E o)</code></td><td>比较此枚举与指定对象的顺序</td></tr><tr><td><code>boolean</code></td><td><code>equals(Object other)</code></td><td>当指定对象等于此枚举常量时，返回 true。</td></tr><tr><td><code>Class&lt;?&gt;</code></td><td><code>getDeclaringClass()</code></td><td>返回与此枚举常量的枚举类型相对应的 Class 对象</td></tr><tr><td><code>String</code></td><td><code>name()</code></td><td>返回此枚举常量的名称，在其枚举声明中对其进行声明</td></tr><tr><td><code>int</code></td><td><code>ordinal()</code></td><td>返回枚举常量的序数（它在枚举声明中的位置，其中初始常量序数为零）</td></tr><tr><td><code>String</code></td><td><code>toString()</code></td><td>返回枚举常量的名称，它包含在声明中</td></tr><tr><td><code>static&lt;T extends Enum&lt;T&gt;&gt; T</code></td><td><code>static valueOf(Class&lt;T&gt; enumType, String name)</code></td><td>返回带指定名称的指定枚举类型的枚举常量。</td></tr></tbody></table><p>若需要重载枚举类型的具体返回值，可以通过以下方式进行：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Options <span class="token punctuation">{</span>    LIST_ALL_BOOKS<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    RETURN_BOOK<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    QUIT<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中<code>super.ordinal()</code>默认返回当前没去常量的序数（从零开始）。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Annotation</title>
      <link href="/2018/09/04/Spring-Annotation/"/>
      <url>/2018/09/04/Spring-Annotation/</url>
      
        <content type="html"><![CDATA[<h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><hr><p>描述注解的使用范围，超出范围时编译失败。</p><a id="more"></a><p>类型：</p><table><thead><tr><th>取值类型(element_type)</th><th>描述</th></tr></thead><tbody><tr><td>CONSTRUCTOR</td><td>描述构造器</td></tr><tr><td>FIELD</td><td>描述域（变量）</td></tr><tr><td>LOCAL_VARIABLE</td><td>描述局部变量</td></tr><tr><td>METHOD</td><td>描述方法</td></tr><tr><td>PACKAGE</td><td>描述包</td></tr><tr><td>PARAMETER</td><td>描述参数</td></tr><tr><td>TYPE</td><td>描述类、接口（包括注解类型）或enum</td></tr></tbody></table><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><hr><p>描述注释的生命周期，注解的生效范围。</p><table><thead><tr><th>取值范围（retention_type）</th><th>描述</th></tr></thead><tbody><tr><td>SOURCE</td><td>在源文件中生效，在class文件将去除</td></tr><tr><td>CLASS</td><td>在class文件生效，运行时无法获取</td></tr><tr><td>RUNTIME</td><td>运行时通过反射机制获取，保留在class文件</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><hr><p>@Documented —— javac生成API时显示注解信息</p><p>@Inherited —— 表明该注解可以由子类继承，并且子类可以继承父类注解。默认情况下子类不继承父类的注解。</p><h2 id="自定义Controller参数注解"><a href="#自定义Controller参数注解" class="headerlink" title="自定义Controller参数注解"></a>自定义Controller参数注解</h2><hr><p>根据上述内容，首先定义注解类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Auth</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后注册配置项</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        argumentResolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义注解的解析实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span>MethodParameter parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span>Auth<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">resolveArgument</span><span class="token punctuation">(</span>MethodParameter parameter<span class="token punctuation">,</span> ModelAndViewContainer mavContainer<span class="token punctuation">,</span> NativeWebRequest webRequest<span class="token punctuation">,</span>                                  WebDataBinderFactory binderFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> webRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String roleStr <span class="token operator">=</span> webRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String id <span class="token operator">=</span> webRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>roleStr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>roleStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            roleStr <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> roles <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>roleStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> annotation </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim基础</title>
      <link href="/2018/09/02/vim%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/02/vim%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Vim常用模式介绍"><a href="#Vim常用模式介绍" class="headerlink" title="Vim常用模式介绍"></a>Vim常用模式介绍</h2><hr><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><blockquote><p>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。<br>Vim强大的编辑能来自于其普通模式命令。普通模式命令往往需要一个操作符结尾。例如普通模式命令dd删除当前行，但是第一个”d”的后面可以跟另外的移动命令来代替第二个d，比如用移动到下一行的”j”键就可以删除当前行和下一行。另外还可以指定命令重复次数，2dd（重复dd两次），和dj的效果是一样的。用户学习了各种各样的文本间移动／跳转的命令和其他的普通模式的编辑命令，并且能够灵活组合使用的话，能够比那些没有模式的编辑器更加高效的进行文本编辑。<br>在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按a（append／追加）键或者i（insert／插入）键。</p></blockquote><a id="more"></a><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><blockquote><p>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按ESC键回到普通模式。</p></blockquote><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><blockquote><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（:键），搜索（/和?键）或者过滤命令（!键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p></blockquote><h2 id="常用模式切换"><a href="#常用模式切换" class="headerlink" title="常用模式切换"></a>常用模式切换</h2><hr><p>vim启动进入普通模式，处于插入模式或命令行模式时只需要按Esc或者Ctrl+[(这在vim课程环境中不管用)即可进入普通模式。普通模式中按i（插入）或a（附加）键都可以进入插入模式，普通模式中按:进入命令行模式。命令行模式中输入wq回车后保存并退出vim。</p><h2 id="普通模式下游标移动"><a href="#普通模式下游标移动" class="headerlink" title="普通模式下游标移动"></a>普通模式下游标移动</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>h</td><td>左</td></tr><tr><td>l</td><td>右</td></tr><tr><td>j</td><td>下</td></tr><tr><td>k</td><td>上</td></tr><tr><td>w</td><td>移动到下个单词</td></tr><tr><td>b</td><td>移动到上个单词</td></tr></tbody></table><h2 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在当前光标处编辑</td></tr><tr><td>I</td><td>在行首插入</td></tr><tr><td>A</td><td>在行末插入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>o</td><td>在当前行后插入新行</td></tr><tr><td>O</td><td>在当前行前插入新行</td></tr><tr><td>cw</td><td>替换从光标所在位置后到一个单词结尾的字符</td></tr></tbody></table><h2 id="命令行模式退出Vim"><a href="#命令行模式退出Vim" class="headerlink" title="命令行模式退出Vim"></a>命令行模式退出Vim</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:q!</td><td>强制退出,不保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:wq!</td><td>强制退出并保存</td></tr><tr><td>:w &lt;文件路径&gt;</td><td>另存为</td></tr><tr><td>:saveas 文件路径</td><td>另存为</td></tr><tr><td>:x</td><td>保存并退出</td></tr><tr><td>:wq</td><td>保存并退出</td></tr></tbody></table><h2 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>删除游标所在字符</td></tr><tr><td>X</td><td>删除游标所在前一个字符</td></tr><tr><td>Delete</td><td>同x</td></tr><tr><td>dd</td><td>删除整行</td></tr><tr><td><code>n</code>dd</td><td>删除n行</td></tr><tr><td>dw</td><td>删除一个单词（不适用于中文）</td></tr><tr><td>d$或D</td><td>删除至行尾</td></tr><tr><td>d^</td><td>删除至行头</td></tr><tr><td>dG</td><td>删除至文档末尾处</td></tr><tr><td>d1G</td><td>删除至文档首部</td></tr></tbody></table><h2 id="重复操作"><a href="#重复操作" class="headerlink" title="重复操作"></a>重复操作</h2><hr><p>在普通模式下.(小数点)表示重复上一次的命令操作</p><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><hr><h3 id="行间跳转"><a href="#行间跳转" class="headerlink" title="行间跳转"></a>行间跳转</h3><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nG</td><td>游标移动到第n行</td></tr><tr><td>gg</td><td>游标移动到第一行</td></tr><tr><td>G</td><td>到最后一行</td></tr><tr><td>Ctrl+o</td><td>返回上一次光标所在位置</td></tr></tbody></table><h3 id="行内跳转"><a href="#行内跳转" class="headerlink" title="行内跳转"></a>行内跳转</h3><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>到下个单词开头</td></tr><tr><td>e</td><td>到当前单词结尾</td></tr><tr><td>b</td><td>到前一个单词开头</td></tr><tr><td>ge</td><td>到前一个单词结尾</td></tr><tr><td>0或^</td><td>到行头</td></tr><tr><td>$</td><td>到行尾</td></tr><tr><td>f&lt;字母&gt;</td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配位置(非常实用)</td></tr><tr><td>F&lt;字母&gt;</td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配的位置</td></tr></tbody></table><h2 id="剪切与粘贴"><a href="#剪切与粘贴" class="headerlink" title="剪切与粘贴"></a>剪切与粘贴</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>yy</td><td>复制游标所在整行</td></tr><tr><td>y^或y0</td><td>复制至行首</td></tr><tr><td>y$</td><td>复制至行尾</td></tr><tr><td>yw</td><td>复制一个单词</td></tr><tr><td>y2w</td><td>复制两个单词</td></tr><tr><td>yG</td><td>复制至文本末尾</td></tr><tr><td>y1G</td><td>复制至文本开头</td></tr><tr><td>p</td><td>粘贴至光标后</td></tr><tr><td>P</td><td>粘贴至光标前</td></tr></tbody></table><h2 id="字符替换和撤销-Undo操作"><a href="#字符替换和撤销-Undo操作" class="headerlink" title="字符替换和撤销(Undo操作)"></a>字符替换和撤销(Undo操作)</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>r + &lt;带替换字母&gt;</td><td>将游标所在字母替换为指定字母</td></tr><tr><td>R</td><td>连续替换</td></tr><tr><td>cc</td><td>替换整行，即删除整行，并进入插入模式</td></tr><tr><td>cw</td><td>替换一个单词</td></tr><tr><td>C</td><td>替换游标以后至行末</td></tr><tr><td>~</td><td>翻转游标大小写</td></tr><tr><td>u{n}</td><td>撤销一次或n次操作</td></tr><tr><td>U</td><td>撤销当前行的所有修改</td></tr><tr><td>Ctrl+r</td><td>redo，撤销undo操作</td></tr></tbody></table><h2 id="快速缩进"><a href="#快速缩进" class="headerlink" title="快速缩进"></a>快速缩进</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>&gt;&gt;</td><td>整行向右缩进</td></tr><tr><td>&lt;&lt;</td><td>整行向左回退</td></tr><tr><td>:set shiftwidth={n}</td><td>设置缩进量</td></tr><tr><td>:set shiftwidth?</td><td>查看当前缩进量</td></tr></tbody></table><h2 id="调整文本位置"><a href="#调整文本位置" class="headerlink" title="调整文本位置"></a>调整文本位置</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:ce</td><td>本行内容居中</td></tr><tr><td>:ri</td><td>本行内容靠右</td></tr><tr><td>:le</td><td>本行内容靠左</td></tr></tbody></table><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>/</td><td>向下查找</td></tr><tr><td>?</td><td>向上查找</td></tr><tr><td>\*</td><td>向下寻找游标所在处的单词</td></tr><tr><td>\#</td><td>向上寻找游标所在处的单词</td></tr><tr><td>g\*</td><td>向下寻找部分符合游标所在处的单词即可</td></tr><tr><td>g\#</td><td>向上寻找部分符合游标所在处的单词即可</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Contract DSL</title>
      <link href="/2018/08/31/Spring%20Cloud%20Contract%20DSL/"/>
      <url>/2018/08/31/Spring%20Cloud%20Contract%20DSL/</url>
      
        <content type="html"><![CDATA[<h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><hr><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><hr><p>指定当前contract文件生成的测试名称，如果不指定name，默认为文件名。</p><p>例如文件名为someTest，默认测试名为：validate_someTest</p><a id="more"></a><p>groovy:<code>name(some_test)</code> </p><p>yaml:<code>name: ...</code></p><p>测试名为:validate_some_test</p><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><hr><p>指定当前contract文件的描述，具体使用场景尚不明确。</p><p>groovy:<code>description(...)</code></p><p>yaml:<code>description: ...</code></p><h3 id="Ignore"><a href="#Ignore" class="headerlink" title="Ignore"></a>Ignore</h3><hr><p>指定当前contract文件被忽略，跳过stub和test文件的生成</p><p>groovy:<code>ignore()</code></p><p>yaml:<code>ignore: true</code></p><h3 id="Request-amp-Response"><a href="#Request-amp-Response" class="headerlink" title="Request &amp; Response"></a>Request &amp; Response</h3><hr><p>在HTTP协议中Request部分仅要求method和url为必要部分，当consumer端调用request时，需要对request部分的请求进行匹配，匹配得上才会启用该stub。</p><p>Response部分则至少需要包含HTTP状态码部分。一个具体的Request &amp; Response示例代码如下：</p><p>groovy:</p><pre class=" language-groovy"><code class="language-groovy">org<span class="token operator">.</span>springframework<span class="token operator">.</span>cloud<span class="token operator">.</span>contract<span class="token operator">.</span>spec<span class="token operator">.</span>Contract<span class="token operator">.</span>make <span class="token punctuation">{</span>    request <span class="token punctuation">{</span>        method <span class="token string">'GET'</span>        <span class="token comment" spellcheck="true">// Specifying `url` and `urlPath` in one contract is illegal.</span>        <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8888/foo'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    response <span class="token punctuation">{</span>        status <span class="token number">200</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>yaml:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">request</span><span class="token punctuation">:</span>    <span class="token key atrule">method</span><span class="token punctuation">:</span> PUT    <span class="token key atrule">urlPath</span><span class="token punctuation">:</span> /foo<span class="token key atrule">response</span><span class="token punctuation">:</span>    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token number">200</span></code></pre><h2 id="producer-consumer"><a href="#producer-consumer" class="headerlink" title="producer/consumer"></a>producer/consumer</h2><hr><p>在撰写契约时，对于request部分producer端生成的Test必须是具体的url(eg. product/1)，而在consumer端则期望是任意的某种结构下的url(eg. product/)。groovy dsl提供了动态属性来实现以上效果:</p><pre class=" language-groovy"><code class="language-groovy"><span class="token function">value</span><span class="token punctuation">(</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token function">stub</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">$</span><span class="token punctuation">(</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">$</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">$</span><span class="token punctuation">(</span><span class="token function">stub</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">$</span><span class="token punctuation">(</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><hr><p>为了达到匹配某个固定结构的语法，可以在契约文件中结合正则表达式，在contract dsl中除了可以自己通过<code>regex(...)</code>撰写正则表达式外，也自带了许多常用正则匹配方式，储存在RegexPatterns类中</p><pre class=" language-java"><code class="language-java"><span class="token function">onlyAlphaUnicode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">alphaNumeric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">anyBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>使用时，通过<code>byRegex(email())</code>类似的语法即可。</p><h2 id="bodyMatcher"><a href="#bodyMatcher" class="headerlink" title="bodyMatcher"></a>bodyMatcher</h2><hr><p>bodyMatcher与producer/consumer的作用类似，是在request或response中，producer端和consumer端逻辑不一致时，动态调节契约的实现方案。其主要作用在与调节body的动态属性。语法如下所示：</p><pre class=" language-groovy"><code class="language-groovy">bodyMatchers <span class="token punctuation">{</span>    <span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">'$.email'</span><span class="token punctuation">,</span> <span class="token function">byRegex</span><span class="token punctuation">(</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">'$.status'</span><span class="token punctuation">,</span> <span class="token function">byType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>对于<code>$.email</code>语法的详细信息可以参考<a href="https://feixie-liam.github.io/2018/08/29/JsonPath/" target="_blank" rel="noopener">JsonPath</a>。</p><h2 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h2><hr><p>撰写的契约文件如下所示：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>cloud<span class="token operator">.</span>contract<span class="token operator">.</span>spec<span class="token operator">.</span>ContractContract<span class="token operator">.</span>make <span class="token punctuation">{</span>    request <span class="token punctuation">{</span>        method <span class="token string">"post"</span>        url <span class="token function">value</span><span class="token punctuation">(</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token string">"/api/email-reset/users/2"</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/api/email-reset/users/\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"""                {                    "email":"123@qq.com"                }            """</span>        <span class="token punctuation">)</span>        bodyMatchers <span class="token punctuation">{</span>            <span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">'$.email'</span><span class="token punctuation">,</span> <span class="token function">byRegex</span><span class="token punctuation">(</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        headers <span class="token punctuation">{</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token punctuation">{</span>        status <span class="token number">201</span>        <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"""            {                "email":"123456789@qq.com",                "status":"PENDING"            }        """</span><span class="token punctuation">)</span>        bodyMatchers <span class="token punctuation">{</span>            <span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">'$.email'</span><span class="token punctuation">,</span> <span class="token function">byRegex</span><span class="token punctuation">(</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">'$.status'</span><span class="token punctuation">,</span> <span class="token function">byType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        headers <span class="token punctuation">{</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对应生成的Producer端的测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">validate_createEmailResetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// given:</span>            MockMvcRequestSpecification request <span class="token operator">=</span> <span class="token function">given</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"{\"email\":\"123@qq.com\"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// when:</span>            ResponseOptions response <span class="token operator">=</span> <span class="token function">given</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spec</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/email-reset/users/2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// then:</span>            <span class="token function">assertThat</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertThat</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// and:</span>            DocumentContext parsedJson <span class="token operator">=</span> JsonPath<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// and:</span>            <span class="token function">assertThat</span><span class="token punctuation">(</span>parsedJson<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$.email"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> parsedJson<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$.status"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>用于consumer端调用的stubs mapping文件如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token string">"85d59d1e-5823-4093-be4d-1169085aa177"</span><span class="token punctuation">,</span>  <span class="token property">"request"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"urlPattern"</span> <span class="token operator">:</span> <span class="token string">"/api/email-reset/users/\\d+"</span><span class="token punctuation">,</span>    <span class="token property">"method"</span> <span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token property">"headers"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Content-Type"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"equalTo"</span> <span class="token operator">:</span> <span class="token string">"application/json;charset=UTF-8"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"bodyPatterns"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>      <span class="token property">"matchesJsonPath"</span> <span class="token operator">:</span> <span class="token string">"$[?(@.email =~ /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})/)]"</span>    <span class="token punctuation">}</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"response"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">201</span><span class="token punctuation">,</span>    <span class="token property">"body"</span> <span class="token operator">:</span> <span class="token property">"{\"email\":\"123456789@qq.com\",\"status\"</span><span class="token operator">:</span>\<span class="token string">"PENDING\"}"</span><span class="token punctuation">,</span>    <span class="token property">"headers"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Content-Type"</span> <span class="token operator">:</span> <span class="token string">"application/json;charset=UTF-8"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"transformers"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"response-template"</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"uuid"</span> <span class="token operator">:</span> <span class="token string">"85d59d1e-5823-4093-be4d-1169085aa177"</span><span class="token punctuation">}</span></code></pre><p>可以看到契约自动生成的文件，针对于producer端和consumer端的url以及body是动态变化的。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> contract </tag>
            
            <tag> groovy </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsonPath</title>
      <link href="/2018/08/30/JsonPath/"/>
      <url>/2018/08/30/JsonPath/</url>
      
        <content type="html"><![CDATA[<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><hr><p>在build.gradle中添加依赖<code>compile(&#39;com.jayway.jsonpath:json-path:2.1.0&#39;)</code>。</p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><hr><p>讲解示例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"book"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"reference"</span><span class="token punctuation">,</span>                <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Nigel Rees"</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Sayings of the Century"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">8.95</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fiction"</span><span class="token punctuation">,</span>                <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Evelyn Waugh"</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Sword of Honour"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">12.99</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fiction"</span><span class="token punctuation">,</span>                <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Herman Melville"</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Moby Dick"</span><span class="token punctuation">,</span>                <span class="token property">"isbn"</span><span class="token operator">:</span> <span class="token string">"0-553-21311-3"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">8.99</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fiction"</span><span class="token punctuation">,</span>                <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"J. R. R. Tolkien"</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"The Lord of the Rings"</span><span class="token punctuation">,</span>                <span class="token property">"isbn"</span><span class="token operator">:</span> <span class="token string">"0-395-19395-8"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">22.99</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"bicycle"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>            <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">19.95</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"expensive"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><h3 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h3><hr><p>jsonpath有两种方式表示路径：</p><p>dot notation:</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">.</span>store<span class="token punctuation">.</span>book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><p>backet  notation</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">[</span><span class="token string">'store'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'book'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><p>两种方式指向同样一个json子串。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><hr><p>在jsonpath中有多个有效的运算符（Operator）</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>$</code></td><td>The root element to query. This starts all path expressions.</td></tr><tr><td><code>@</code></td><td>The current node being processed by a filter predicate.</td></tr><tr><td><code>*</code></td><td>Wildcard. Available anywhere a name or numeric are required.</td></tr><tr><td><code>..</code></td><td>Deep scan. Available anywhere a name is required.</td></tr><tr><td><code>.&lt;name&gt;</code></td><td>Dot-notated child</td></tr><tr><td><code>[&#39;&lt;name&gt;&#39; (, &#39;&lt;name&gt;&#39;)]</code></td><td>Bracket-notated child or children</td></tr><tr><td><code>[&lt;number&gt; (, &lt;number&gt;)]</code></td><td>Array index or indexes</td></tr><tr><td><code>[start:end]</code></td><td>Array slice operator</td></tr><tr><td><code>[?(&lt;expression&gt;)]</code></td><td>Filter expression. Expression must evaluate to a boolean value.</td></tr></tbody></table><h3 id="方法和过滤器"><a href="#方法和过滤器" class="headerlink" title="方法和过滤器"></a>方法和过滤器</h3><hr><p>jsonpath支持多个方法：</p><ul><li>min()</li><li>max()</li><li>avg()</li><li>stddev()</li><li>length()</li></ul><p>使用方法时，只能讲方法添加到json路径的末尾。</p><p>除此之外，jsonpath还支持过滤器，过滤器必须返回一个布尔类型，比如[?(@.color == ‘blue’)]，完整过滤器列表如下所示：</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>==</td><td>left is equal to right (note that 1 is not equal to ‘1’)</td></tr><tr><td>!=</td><td>left is not equal to right</td></tr><tr><td>&lt;</td><td>left is less than right</td></tr><tr><td>&lt;=</td><td>left is less or equal to right</td></tr><tr><td>&gt;</td><td>left is greater than right</td></tr><tr><td>&gt;=</td><td>left is greater than or equal to right</td></tr><tr><td>=~</td><td>left matches regular expression [?(@.name =~ /foo.*?/i)]</td></tr><tr><td>in</td><td>left exists in right [?(@.size in [‘S’, ‘M’])]</td></tr><tr><td>nin</td><td>left does not exists in right</td></tr><tr><td>subsetof</td><td>left is a subset of right [?(@.sizes subsetof [‘S’, ‘M’, ‘L’])]</td></tr><tr><td>size</td><td>size of left (array or string) should match right</td></tr><tr><td>empty</td><td>left (array or string) should be empty</td></tr></tbody></table><p>混合使用运算符，方法和过滤器的具体示例如下:</p><table><thead><tr><th>JsonPath</th><th>Result</th></tr></thead><tbody><tr><td><a href="http://jsonpath.herokuapp.com/?path=$.store.book[*].author" target="_blank" rel="noopener">$.store.book[*].author</a></td><td>The authors of all books</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..author" target="_blank" rel="noopener">$..author</a></td><td>All authors</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$.store.*" target="_blank" rel="noopener">$.store.*</a></td><td>All things, both books and bicycles</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$.store..price" target="_blank" rel="noopener">$.store..price</a></td><td>The price of everything</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[2]" target="_blank" rel="noopener">$..book[2]</a></td><td>The third book</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[2]" target="_blank" rel="noopener">$..book[-2]</a></td><td>The second to last book</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[0,1]" target="_blank" rel="noopener">$..book[0,1]</a></td><td>The first two books</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[:2]" target="_blank" rel="noopener">$..book[:2]</a></td><td>All books from index 0 (inclusive) until index 2 (exclusive)</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[1:2]" target="_blank" rel="noopener">$..book[1:2]</a></td><td>All books from index 1 (inclusive) until index 2 (exclusive)</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[-2:]" target="_blank" rel="noopener">$..book[-2:]</a></td><td>Last two books</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[2:]" target="_blank" rel="noopener">$..book[2:]</a></td><td>Book number two from tail</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.isbn" target="_blank" rel="noopener">$..book[?(@.isbn)]</a>])</td><td>All books with an ISBN number</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$.store.book[?(@.price%20%3C%2010" target="_blank" rel="noopener">$.store.book[?(@.price &lt; 10)]</a>])</td><td>All books in store cheaper than 10</td></tr><tr><td>[$..book<a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.price%20%3C=%20$[%27expensive%27]" target="_blank" rel="noopener">?(@.price &lt;= $[‘expensive’])]</a>])</td><td>All books in store that are not “expensive”</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.author%20=~%20/.*REES/i" target="_blank" rel="noopener">$..book[?(@.author =~ /.*REES/i)]</a>])</td><td>All books matching regex (ignore case)</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..*" target="_blank" rel="noopener">$..*</a></td><td>Give me every thing</td></tr><tr><td><a href="http://jsonpath.herokuapp.com/?path=$..book.length(" target="_blank" rel="noopener">$..book.length()</a>)</td><td>The number of books</td></tr></tbody></table><h2 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h2><hr><p>读取一个json字符串的最简单方式如下:</p><pre class=" language-java"><code class="language-java">String json <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> authors <span class="token operator">=</span> JsonPath<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token string">"$.store.book[*].author"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果想要提取json字符串中的部分数据：</p><pre class=" language-java"><code class="language-java">String json <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">;</span>DocumentContext ctx <span class="token operator">=</span> JsonPath<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> authorsOfBooksWithISBN <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$.store.book[?(@.isbn)].author"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> expensiveBooks <span class="token operator">=</span> JsonPath                            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$.store.book[?(@.price > 10)]"</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> contract </tag>
            
            <tag> groovy </tag>
            
            <tag> JsonPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zuul与contract-stubrunner配置mock-server</title>
      <link href="/2018/08/30/zuul%E4%B8%8Econtract-stubrunner%E9%85%8D%E7%BD%AEmock-server/"/>
      <url>/2018/08/30/zuul%E4%B8%8Econtract-stubrunner%E9%85%8D%E7%BD%AEmock-server/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><hr><p>由于微服务系统经常存在各种微服务之间相互调用，若单独对某个微服务进行修改必须启动其所依赖的所有服务，为了解决这一痛点，本文使用zuul与stubrunner组成mock-server，模拟所有依赖的服务，这样在对某个微服务进行开发时，可以只需要启动mock-server即可正常运行微服务。</p><a id="more"></a><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><hr><p>该方法依赖于在前期已经撰写的非常完备的契约，并需要将其发布到共有仓库以供调用。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><hr><p>两个依赖：</p><pre><code>compile(&#39;org.springframework.cloud:spring-cloud-starter-netflix-zuul&#39;)compile(&#39;org.springframework.cloud:spring-cloud-starter-contract-stub-runner&#39;)</code></pre><p>两个注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableZuulProxy</span><span class="token annotation punctuation">@AutoConfigureStubRunner</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContractApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ContractApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>两段配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">stubrunner</span><span class="token punctuation">:</span>  <span class="token key atrule">ids</span><span class="token punctuation">:</span> com.thoughtworks<span class="token punctuation">:</span>contract<span class="token punctuation">:</span>+<span class="token punctuation">:</span>stubs<span class="token punctuation">:</span><span class="token number">8090</span>  <span class="token key atrule">repositoryRoot</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8081/nexus/content/repositories/snapshots/  <span class="token key atrule">stubs-mode</span><span class="token punctuation">:</span> local<span class="token key atrule">zuul</span><span class="token punctuation">:</span>  <span class="token key atrule">routes</span><span class="token punctuation">:</span>    <span class="token key atrule">product</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /products/**      <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8090/products</code></pre><p>最后将调用了mock-server服务的微程序端口指向mock-server即可自动从mock-server调用对应的stubs。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> contract </tag>
            
            <tag> zuul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用FeignClient</title>
      <link href="/2018/08/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8FeignClient/"/>
      <url>/2018/08/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8FeignClient/</url>
      
        <content type="html"><![CDATA[<h2 id="FeignClient中的配置问题"><a href="#FeignClient中的配置问题" class="headerlink" title="FeignClient中的配置问题"></a>FeignClient中的配置问题</h2><hr><p>在build.gradle中添加如下依赖</p><a id="more"></a><pre class=" language-}"><code class="language-}">ext {    springCloudVersion = 'Finchley.SR1'}dependencies {   compile('org.springframework.cloud:spring-cloud-starter-openfeign')    compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')}dependencyManagement {    imports {        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"    }}</code></pre><p>Ribbon依赖用于自动负载均衡，如果没有使用Euraka服务注册与发现，则需要自己在application.yml文件中进行相应的配置，否则程序运行过程中无法找到Client对应的服务。</p><p>在application.yml中，需要配置客户端server以及其相应的地址</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">client-server</span><span class="token punctuation">:</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">listOfServers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8090</span><span class="token key atrule">hlp</span><span class="token punctuation">:</span>  <span class="token key atrule">client-server</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8090</span></code></pre><p>Client类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"client-server"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"${hlp.client-server.url}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductClient</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>最后在应用程序入口处中加入<code>@EnableFeignClients</code>注解。</p>]]></content>
      
      
      <categories>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>契约测试示例-spring-cloud-contract</title>
      <link href="/2018/08/25/%E5%A5%91%E7%BA%A6%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8B-spring-cloud-contract/"/>
      <url>/2018/08/25/%E5%A5%91%E7%BA%A6%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8B-spring-cloud-contract/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Contract"><a href="#Spring-Cloud-Contract" class="headerlink" title="Spring Cloud Contract"></a>Spring Cloud Contract</h1><p>本文展示了使用Spring Cloud Contract，实现契约测试的必要代码。</p><a id="more"></a><h2 id="Provider端"><a href="#Provider端" class="headerlink" title="Provider端:"></a>Provider端:</h2><hr><h3 id="首先配置Contract相关依赖"><a href="#首先配置Contract相关依赖" class="headerlink" title="首先配置Contract相关依赖"></a>首先配置Contract相关依赖</h3><hr><p>build.gradle</p><pre class=" language-gradle"><code class="language-gradle">buildscript {    ...    dependencies {        ...        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.0.1.RELEASE")    }}...apply plugin: 'spring-cloud-contract'...dependencies {    testCompile('org.springframework.cloud:spring-cloud-starter-contract-verifier')}contracts {    baseClassForTests = "com.thoughtworks.contract.ProductBaseTest"}...</code></pre><p>如果项目中存在多个controller，需要分别对各个controller进行测试，则需要将contracts任务进行修改</p><pre><code>contracts {    packageWithBaseClasses = &quot;com.thoughtworks.contract.provider&quot;}</code></pre><p>然后创建相应实体名称的test基类(eg:ProductBase)，在test/resouces/contracts目录下创建不同实体的Dir储存不同实体的请求。</p><h3 id="在测试目录下创建基类测试文件"><a href="#在测试目录下创建基类测试文件" class="headerlink" title="在测试目录下创建基类测试文件"></a>在测试目录下创建基类测试文件</h3><hr><p>ProductBaseTest</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> ContractApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> webEnvironment <span class="token operator">=</span> SpringBootTest<span class="token punctuation">.</span>WebEnvironment<span class="token punctuation">.</span>MOCK<span class="token punctuation">)</span><span class="token annotation punctuation">@DirtiesContext</span><span class="token annotation punctuation">@AutoConfigureMessageVerifier</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ProductBaseTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProductController productController<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StandaloneMockMvcBuilder standaloneMockMvcBuilder <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span>productController<span class="token punctuation">)</span><span class="token punctuation">;</span>        RestAssuredMockMvc<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span>standaloneMockMvcBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里需要注意将基类声明为abstract class，不这样做在运行测试时会对当前测试文件报错:<code>java.lang.Exception: No runnable methods</code></p><h3 id="创建stubs"><a href="#创建stubs" class="headerlink" title="创建stubs"></a>创建stubs</h3><hr><p>在test的resources目录下创建contracts目录，并在其中添加stubs文件，编写stubs可以使用两种方式进行编写：yaml，groovy。</p><p>yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"should_return_all_products_yaml"</span><span class="token key atrule">request</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /products  <span class="token key atrule">method</span><span class="token punctuation">:</span> GET<span class="token key atrule">response</span><span class="token punctuation">:</span>  <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token number">200</span>  <span class="token key atrule">bodyFromFile</span><span class="token punctuation">:</span> response.json  <span class="token key atrule">headers</span><span class="token punctuation">:</span>    <span class="token key atrule">Content-Type</span><span class="token punctuation">:</span> application/json;charset=UTF<span class="token punctuation">-</span><span class="token number">8</span></code></pre><p>groovy</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>cloud<span class="token operator">.</span>contract<span class="token operator">.</span>spec<span class="token operator">.</span>ContractContract<span class="token operator">.</span>make <span class="token punctuation">{</span>    name <span class="token string">"should_return_all_products_groovy"</span>    request <span class="token punctuation">{</span>        method <span class="token function">GET</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"/products"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    response <span class="token punctuation">{</span>        headers<span class="token punctuation">{</span>            Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json<span class="token punctuation">;</span>charset<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span>        <span class="token punctuation">}</span>        <span class="token function">body</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"response.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意到本文都是通过在contracts目录下创建对应的json文件，作为body的输入。</p><h3 id="添加DB-Rider"><a href="#添加DB-Rider" class="headerlink" title="添加DB-Rider"></a>添加DB-Rider</h3><hr><p>添加DB-Rider使得在测试时，使用DB-Rider生成的数据库数据进行测试，防止原始数据库在测试阶段被修改。</p><p>首先添加依赖</p><pre><code>    testCompile(&#39;com.github.database-rider:rider-spring:1.2.9&#39;) {        exclude group: &#39;org.slf4j&#39;, module: &#39;slf4j-simple&#39;    }</code></pre><p>在ProductBaseTest中添加DB-rider的相关注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> ContractApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> webEnvironment <span class="token operator">=</span> SpringBootTest<span class="token punctuation">.</span>WebEnvironment<span class="token punctuation">.</span>MOCK<span class="token punctuation">)</span><span class="token annotation punctuation">@DBRider</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DBUnit</span><span class="token punctuation">(</span>caseSensitiveTableNames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DataSet</span><span class="token punctuation">(</span><span class="token string">"product.yml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ProductBaseTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProductController productController<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StandaloneMockMvcBuilder standaloneMockMvcBuilder <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span>productController<span class="token punctuation">)</span><span class="token punctuation">;</span>        RestAssuredMockMvc<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span>standaloneMockMvcBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在test/resources目录下的创建datasets文件夹，在里面使用yaml格式添加自定义的数据库数据</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">product</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"苹果"</span>  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"笔记本电脑"</span>  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"电视机"</span></code></pre><h3 id="nexus"><a href="#nexus" class="headerlink" title="nexus"></a>nexus</h3><hr><p>为了使producer端生成的契约jar包和相关文件能够发布到共有仓库，以便consumer端能够调用，使用docker创建nexus的容器</p><pre><code>docker pull sonatype/nexusdocker run -d -p 8081:8081 --name nexus sonatype/nexus</code></pre><p>然后将生成的契约文件自动部署到nexus的容器中，在进行自动部署时，需要在build.gradle中配置依赖</p><pre><code>...apply plugin: &#39;maven-publish&#39;...publishing {    repositories {        maven {            url &#39;http://localhost:8081/nexus/content/repositories/snapshots/&#39;            credentials {                username = &#39;admin&#39;                password = &#39;admin123&#39;            }        }    }}</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><hr><p>完成代码编写后，通过运行./gradlew clean build即可自动进行契约测试，contract插件将自动在build/generated-test-sources目录下生成对应的测试文件，进行测试。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><hr><p>运行./gradlew publish将build生成的stubs自动发布到nexus上，供consumer端进行调用。</p><p>完整示例代码地址：<a href="https://github.com/FeiXie-Liam/contract-start-provider" target="_blank" rel="noopener">https://github.com/FeiXie-Liam/contract-start-provider</a></p><h2 id="consumer端"><a href="#consumer端" class="headerlink" title="consumer端"></a>consumer端</h2><hr><h3 id="配置相关依赖"><a href="#配置相关依赖" class="headerlink" title="配置相关依赖"></a>配置相关依赖</h3><hr><pre><code>    testCompile (&#39;org.springframework.cloud:spring-cloud-starter-contract-stub-runner&#39;)</code></pre><h3 id="添加nexus配置"><a href="#添加nexus配置" class="headerlink" title="添加nexus配置"></a>添加nexus配置</h3><hr><p>在测试环境的application-test.yml文件中添加配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">stubrunner</span><span class="token punctuation">:</span>  <span class="token key atrule">ids</span><span class="token punctuation">:</span> com.thoughtworks<span class="token punctuation">:</span>contract<span class="token punctuation">:</span>+<span class="token punctuation">:</span>stubs<span class="token punctuation">:</span><span class="token number">8998</span>  <span class="token key atrule">repositoryRoot</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8081/nexus/content/repositories/snapshots/</code></pre><p>需要注意的是在一台电脑上运行provider和consumer服务时，当provider端已经通过某个端口(eg.8090)运行起来时，如果consumer端想要进行契约测试，stubrunner的ids端口不能与provider端的端口相同，否则测试程序会报错<code>Address already in use</code>，需要将其指定为未被占用的端口。</p><h3 id="编写测试文件"><a href="#编写测试文件" class="headerlink" title="编写测试文件"></a>编写测试文件</h3><hr><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> ConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureStubRunner</span><span class="token punctuation">(</span>stubsMode <span class="token operator">=</span> StubRunnerProperties<span class="token punctuation">.</span>StubsMode<span class="token punctuation">.</span>REMOTE<span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    ProductService productService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_return_all_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//given</span>        <span class="token comment" spellcheck="true">//when</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> actual <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//then</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意在测试文件的类名上添加stub runner的注解<code>@AutoConfigureStubRunner(stubsMode = StubRunnerProperties.StubsMode.LOCAL)</code>stubsMode包含LOCAL, CLASSPATH, REMOTE三种方式。</p><ul><li>LOCAL:线下仓库地址 eg. localhost</li><li>CLASSPATH:项目目录下的问题</li><li>REMOTE:远程仓库的地址 eg.亚马逊云</li></ul><p>完整代码示例：<a href="https://github.com/FeiXie-Liam/contract-start-consumer" target="_blank" rel="noopener">https://github.com/FeiXie-Liam/contract-start-consumer</a></p>]]></content>
      
      
      <categories>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud contract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 版本迁移中的坑</title>
      <link href="/2018/08/22/spring-boot%E7%89%88%E6%9C%AC%E8%BF%81%E7%A7%BB%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
      <url>/2018/08/22/spring-boot%E7%89%88%E6%9C%AC%E8%BF%81%E7%A7%BB%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-进行版本迁移中的坑"><a href="#Spring-Boot-进行版本迁移中的坑" class="headerlink" title="Spring Boot 进行版本迁移中的坑"></a>Spring Boot 进行版本迁移中的坑</h1><p>本文记录了在将项目从spring boot从1.5版本迁移到2.0.4版本中遇到的问题。</p><a id="more"></a><ol><li><p>在<code>build.gradle</code>中，首先需要将springBootVersion指定为2.x版本，并加入maven { url ‘<a href="https://repo.spring.io/libs-snapshot&#39;" target="_blank" rel="noopener">https://repo.spring.io/libs-snapshot&#39;</a> }的路径。</p></li><li><p>对应的springCloudVersion也需要改为兼容2.x版本的<code>Finchley.SR1</code>，否则会报错。添加方式如下所示:</p><pre class=" language-gradle"><code class="language-gradle">ext {    springCloudVersion = 'Finchley.SR1'}...dependencyManagement {    imports {        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"    }}</code></pre></li><li><p>在迁移过程中，加入以下依赖可以在启动过程中提示application.yml中被弃用的方法，注意在迁移结束后删除该部分依赖。</p><pre class=" language-gradle"><code class="language-gradle">    compile('org.springframework.boot:spring-boot-properties-migrator')    runtime("org.springframework.boot:spring-boot-properties-migrator")</code></pre></li><li><p>使用Cloud相关服务时，添加依赖的内容路径有变化，应该使用<code>compile(&#39;org.springframework.cloud:spring-cloud-starter-openfeign&#39;)</code>类似格式。与此同时代码中引用FeignClient时的路径也会变化。</p></li><li><p>在新版本的Lombok中，@Data注解默认启用了private的无参构造函数，如果在@Data后面添加@NoArgsConstructor会报错构造函数已经被创建，需要将@NoArgsConstructor放在@Data之前，使用public的无参构造函数覆盖@Data的私有无参构造函数。</p></li><li><p>在新版JPA中，JpaRepository与CrudRepository中的方法进行了大量改动，新版本删除了许多原有重复方法，使用时需要注意查看，以便正确调用接口。</p></li><li><p>类似的，AuditorAware类中的方法返回类型也有改变，需要注意自定义重载方法的返回类型是否与其一致。</p></li><li><p>在存在@Builder注解构造函数式，慎用@Data，尽量使用@Getter，@Setter否则容易出错。</p></li><li><p>新版actuator在配置页面路径时，相应的配置路径进行了修改，需要注意更新，比如:</p></li></ol><pre class=" language-yaml"><code class="language-yaml">   <span class="token key atrule">old</span><span class="token punctuation">:</span>   <span class="token key atrule">management</span><span class="token punctuation">:</span>     <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /system   <span class="token key atrule">new</span><span class="token punctuation">:</span>   <span class="token key atrule">management</span><span class="token punctuation">:</span>       <span class="token key atrule">server</span><span class="token punctuation">:</span>           <span class="token key atrule">servlet</span><span class="token punctuation">:</span>                 <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /system         <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>           <span class="token key atrule">web</span><span class="token punctuation">:</span>                 <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /</code></pre><ol start="10"><li><p>切换到新版本启动应用时，出现<code>org.hibernate.LazyInitializationException - could not initialize proxy - no Session</code>错误时，主要原因在于lazy机制导致数据库访问时，操作session已经关闭且释放。解决方案为在配置文件中加入<code>spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true</code></p></li><li><p>启动应用时，出现<code>Schema-validation: missing table [hibernate_sequence]</code>错误，主要原因在与使用@GenerateType注解时，id的自动生成策略会默认通过数据库中的hibernate_sequence表，自动生成id，不存在该数据库则会报错，解决方案为在yml配置文件中添加<code>spring.jpa.properties.hibernate.id.new_generator_mappings=false</code>配置。</p></li><li><p>在新版本中，出于安全性考虑，取消了management.security.enabled属性和security.basic.enabled属性，默认全局需要通过验证才能访问资源，需要通过WebSecurityConfigurerAdapter进行配置。</p></li><li><p>flyway在新版本中需要修改为5.x版本，如果使用plugin的话，需要在classpath中添加： </p><pre><code>buildscript {    dependencies {classpath(&quot;org.flywaydb.flyway:org.flywaydb.flyway.gradle.plugin:5.0.7&quot;)    }}apply plugin: &quot;org.flywaydb.flyway&quot;</code></pre></li><li><p>使用@ConfigurationProperties注解时，prefix属性不能使用驼峰命名法，需要在单词之间加入’-‘分割，并全使用小写。</p></li><li><p>在使用新版本JPA中的<code>T getOne(ID id);</code>方法时，如果根据id无法找到对应的实体对象，则会直接抛出异常错误，在以前的版本则会返回一个null对象</p></li><li><p>当使用Optional包裹对象时，如果对象本身可能会是null，则使用Optional.ofNullable(),否则使用Optional.of()，如果胡乱使用可能会导致异常比如重载<code>AuditorAware</code>类的<code>getCurrentUser()</code>方法时，新版本需要返回Optional<t>对象，不使用Optional.ofNullable()则可能导致NullPointerException异常。</t></p></li><li><p>新版JPA中repository的自带方法中，Pageable参数不能为null，老版本则无此限制。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端重点知识问答</title>
      <link href="/2018/08/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94/"/>
      <url>/2018/08/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h3 id="1-在只使用React的前提下，从页面上触发修改到你看到页面变化，中间发生了什么？（描述中包含React的机制和如何用代码进行实现两方面）"><a href="#1-在只使用React的前提下，从页面上触发修改到你看到页面变化，中间发生了什么？（描述中包含React的机制和如何用代码进行实现两方面）" class="headerlink" title="1. 在只使用React的前提下，从页面上触发修改到你看到页面变化，中间发生了什么？（描述中包含React的机制和如何用代码进行实现两方面）"></a>1. 在只使用React的前提下，从页面上触发修改到你看到页面变化，中间发生了什么？（描述中包含React的机制和如何用代码进行实现两方面）</h3><a id="more"></a><p>在React中使用stateless or not 两种方式自定义组件:</p><p>stateless:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Content <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">...</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>not</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>               <span class="token operator">...</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>非stateless得组件可以维护一组state，存放页面的数据，当需要修改state时，使用setState()方法同步将修改后的state渲染到页面上，如果需要将组件维护的state传递到下层组件中读取，则使用props传递。</p><p>通过一个form表单为例，用户的信息由上层组件<content>维护，当用户填写新的用户信息并提交时，下层组件<form>通过props接受<content>的handler函数引用，然后读取表单信息的value，将相关value作为handler参数传回<content>触发state作出相应的更改，并重新渲染页面。</content></content></form></content></p><h3 id="2-如何通过Spring-Data-JPA实现1-to-1，1-to-n，n-to-n的实体关系，并分别为三个关系列举一个场景。"><a href="#2-如何通过Spring-Data-JPA实现1-to-1，1-to-n，n-to-n的实体关系，并分别为三个关系列举一个场景。" class="headerlink" title="2. 如何通过Spring Data JPA实现1 to 1，1 to n，n to n的实体关系，并分别为三个关系列举一个场景。"></a>2. 如何通过Spring Data JPA实现1 to 1，1 to n，n to n的实体关系，并分别为三个关系列举一个场景。</h3><p>JPA中使用注解@OneToOne, @OneToMany, @ManyToOne, @ManyToMany表示实体关系，使用@JoinColum注解指定两个实体对象的外键关联。下面分别对三种情况举例：</p><p>1 to 1：husband and wife</p><pre class=" language-java"><code class="language-java">Husband<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"husband"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Husband</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@OneToOne</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"wife_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Wife wife<span class="token punctuation">;</span><span class="token punctuation">}</span>Wife<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"wife"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Wife</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@OneToOne</span><span class="token punctuation">(</span>mappingBy<span class="token operator">=</span><span class="token string">"wife"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Husband husband<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1 to n: person and house</p><pre class=" language-java"><code class="language-java">Person<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappingBy<span class="token operator">=</span><span class="token string">"person"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>House<span class="token operator">></span> houses<span class="token punctuation">;</span><span class="token punctuation">}</span>House<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"house"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@OneToOne</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"person_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Person person<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>n to n: teacher and student(使用中间表)</p><pre class=" language-java"><code class="language-java">Teacher<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"teacher"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappingBy<span class="token operator">=</span><span class="token string">"teachers"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ManyToMany</span>    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"t_teacher_student"</span><span class="token punctuation">,</span>              joinColumns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"teacher_id"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              inverseJoinColumns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"student_id"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teachers<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-Tasking的作用是什么？划分时有哪些原则？"><a href="#3-Tasking的作用是什么？划分时有哪些原则？" class="headerlink" title="3. Tasking的作用是什么？划分时有哪些原则？"></a>3. Tasking的作用是什么？划分时有哪些原则？</h3><p>Tasking作用在于，当接触新的任务之后，对任务进行拆解，并可视化，以便于展示做Tasking的人能够暴露其对任务的思路，能够更加方便的进行交流。在进行Tasking时，需要注意Tasking需要包含方法，输入，输出以及描述，且所有的task输入输出需要找到对应的出处。</p><h3 id="4-在使用Redux的前提下，从在页面上触发修改到看到页面变化，中间发生了什么？（描述包含Redux的机制和如何使用代码实现两方面）"><a href="#4-在使用Redux的前提下，从在页面上触发修改到看到页面变化，中间发生了什么？（描述包含Redux的机制和如何使用代码实现两方面）" class="headerlink" title="4. 在使用Redux的前提下，从在页面上触发修改到看到页面变化，中间发生了什么？（描述包含Redux的机制和如何使用代码实现两方面）"></a>4. 在使用Redux的前提下，从在页面上触发修改到看到页面变化，中间发生了什么？（描述包含Redux的机制和如何使用代码实现两方面）</h3><p>Redux机制：<img src="https://raw.githubusercontent.com/urunium/Urunium.Redux/master/resources/redux.gif" alt="redux flow"></p><p>当页面某处事件触发时，该触发事件将调用一个handler函数，该函数定义在mapDispatchToProps中，通过connect方法将handler中的参数以及对应的action使用dispatch传递到对应的reducer，根据actionType，找到state的更新逻辑，将新的state返回，并储存在store中，然后重新渲染数据存在更新的页面。</p><h3 id="5-当一个基于HTTP的API请求发送到WEB服务器，接着服务器返回信息，Spring-MVC做了哪些事情？（描述中包含Spring-MVC的机制和代码实现）"><a href="#5-当一个基于HTTP的API请求发送到WEB服务器，接着服务器返回信息，Spring-MVC做了哪些事情？（描述中包含Spring-MVC的机制和代码实现）" class="headerlink" title="5. 当一个基于HTTP的API请求发送到WEB服务器，接着服务器返回信息，Spring MVC做了哪些事情？（描述中包含Spring MVC的机制和代码实现）"></a>5. 当一个基于HTTP的API请求发送到WEB服务器，接着服务器返回信息，Spring MVC做了哪些事情？（描述中包含Spring MVC的机制和代码实现）</h3><p><img src="http://wiki.jikexueyuan.com/project/spring/images/mvc1.png" alt="Spring MVC framework"></p><p>当接受到一个HTTP请求（GET/POST/PUT/DELETE）,Spring MVC首先进入DispatcherServlet进行请求分发，然后通过HandlerMapping将消息传递到Controller层，Controller层通过对应的URI与请求类型接受请求消息，然后转到Service层对输入消息进行相关业务处理，在Service进行相关业务处理时，需要定义实体对象Model，Model对应于数据库中对应的表，通过操作Repository与数据库进行数据交换，返回通过业务逻辑处理后的数据，即完成View Resolver之后，将处理后的数据交给View层进行页面数据更新以及渲染。</p><h3 id="6-什么是TDD？TDD有何优点？TDD流程？"><a href="#6-什么是TDD？TDD有何优点？TDD流程？" class="headerlink" title="6. 什么是TDD？TDD有何优点？TDD流程？"></a>6. 什么是TDD？TDD有何优点？TDD流程？</h3><p>TDD，即测试驱动开发(Test Driven Development) ，是极限编程的一部分，通过先编写测试用例然后再根据测试用例进行最简单实现，小步实现代码，通过测试，然后根据需求继续添加测试，对原有代码进行重构从而最终完成项目开发。</p><p>使用TDD的优点在于：使用TDD能够明确需求，完成测试编写后，强制要求开发者在不改变接口的前提下进行实现，这样便能够保证实现的代码能够符合验收标准。同时也能使帮助开发者聚焦于当前部分，避免注意力被其他需求分散。由于通过小步实现，实现后的代码都能够通过测试用例，因此在进行代码重构的时候出错的概率更小。</p><p>TDD的具体流程：首先根据业务需求明确当前要完成的功能，然后针对该功能完成测试用例的编写，编写玩测试用例后，确认测试代码编译不通过，然后开始实现代码使测试代码通过，添加测试用例，运行测试用例编译不通过，对原有代码进行重构，一次迭代，最终完成功能开发。</p><h3 id="7-js中this引用为什么会变成undefined，强制绑定this引用的方式有哪几种，分别写出实例代码。"><a href="#7-js中this引用为什么会变成undefined，强制绑定this引用的方式有哪几种，分别写出实例代码。" class="headerlink" title="7. js中this引用为什么会变成undefined，强制绑定this引用的方式有哪几种，分别写出实例代码。"></a>7. js中this引用为什么会变成undefined，强制绑定this引用的方式有哪几种，分别写出实例代码。</h3><h3 id="8-HTTP的状态码有哪几类？常见的有哪些？分别表示什么含义？"><a href="#8-HTTP的状态码有哪几类？常见的有哪些？分别表示什么含义？" class="headerlink" title="8. HTTP的状态码有哪几类？常见的有哪些？分别表示什么含义？"></a>8. HTTP的状态码有哪几类？常见的有哪些？分别表示什么含义？</h3><table><thead><tr><th style="text-align:center">HTTP CODE</th><th style="text-align:center">category</th></tr></thead><tbody><tr><td style="text-align:center">1xx</td><td style="text-align:center">消息</td></tr><tr><td style="text-align:center">2xx</td><td style="text-align:center">成功</td></tr><tr><td style="text-align:center">3xx</td><td style="text-align:center">重定向</td></tr><tr><td style="text-align:center">4xx</td><td style="text-align:center">客户端错误</td></tr><tr><td style="text-align:center">5xx</td><td style="text-align:center">服务端错误</td></tr></tbody></table><p>常见的HTTP CODE有：</p><table><thead><tr><th style="text-align:center">HTTP CODE</th><th style="text-align:center">MEANING</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">操作成功并包含返回的数据</td></tr><tr><td style="text-align:center">201</td><td style="text-align:center">操作成功并创建了新数据</td></tr><tr><td style="text-align:center">204</td><td style="text-align:center">操作成功，没有返回内容</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">明显的客户端错误</td></tr><tr><td style="text-align:center">401</td><td style="text-align:center">没有权限访问</td></tr><tr><td style="text-align:center">403</td><td style="text-align:center">页面被隐藏</td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">页面不存在</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">服务端错误</td></tr></tbody></table><h3 id="9-常见的需要重构的坏味道有哪些？以及他们的影响？（至少写5个）"><a href="#9-常见的需要重构的坏味道有哪些？以及他们的影响？（至少写5个）" class="headerlink" title="9. 常见的需要重构的坏味道有哪些？以及他们的影响？（至少写5个）"></a>9. 常见的需要重构的坏味道有哪些？以及他们的影响？（至少写5个）</h3><h3 id="10-jQuery下取得一个id为”my-input”的input的值得代码怎么写？"><a href="#10-jQuery下取得一个id为”my-input”的input的值得代码怎么写？" class="headerlink" title="10. jQuery下取得一个id为”my_input”的input的值得代码怎么写？"></a>10. jQuery下取得一个id为”my_input”的input的值得代码怎么写？</h3><h3 id="11-为一个id为”my-form”下的type为submit的button绑定点击事件的代码怎么写？"><a href="#11-为一个id为”my-form”下的type为submit的button绑定点击事件的代码怎么写？" class="headerlink" title="11.为一个id为”my_form”下的type为submit的button绑定点击事件的代码怎么写？"></a>11.为一个id为”my_form”下的type为submit的button绑定点击事件的代码怎么写？</h3><h3 id="12-如何为RestController写API测试，写出伪代码例子，如何为Repository写单元测试，写出伪代码例子，什么是对象、类、实例？他们之间的关系是怎样的？"><a href="#12-如何为RestController写API测试，写出伪代码例子，如何为Repository写单元测试，写出伪代码例子，什么是对象、类、实例？他们之间的关系是怎样的？" class="headerlink" title="12. 如何为RestController写API测试，写出伪代码例子，如何为Repository写单元测试，写出伪代码例子，什么是对象、类、实例？他们之间的关系是怎样的？"></a>12. 如何为RestController写API测试，写出伪代码例子，如何为Repository写单元测试，写出伪代码例子，什么是对象、类、实例？他们之间的关系是怎样的？</h3><p>API测试:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DataSet</span><span class="token punctuation">(</span><span class="token string">'someData.yml'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> should<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>given<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RestAssured        <span class="token punctuation">.</span><span class="token function">given</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">someCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">someRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">someAssert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>单元测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> should<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>given<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//given</span>    somePrepareData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">;</span>    <span class="token function">given</span><span class="token punctuation">(</span>someClass<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span>somePrepareData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//when</span>    actual <span class="token operator">=</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//then</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span><span class="token function">someProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>类是对象的集合，类里面包含了N多对象，对象只是类的一个特例，对象具有状态和行为，实例是一个对象的具体个例。</p><h3 id="13-使用React时，如何获得某个input的值？"><a href="#13-使用React时，如何获得某个input的值？" class="headerlink" title="13. 使用React时，如何获得某个input的值？"></a>13. 使用React时，如何获得某个input的值？</h3><h3 id="14-通过例子说明Restful-API"><a href="#14-通过例子说明Restful-API" class="headerlink" title="14.通过例子说明Restful API"></a>14.通过例子说明Restful API</h3><h3 id="15-解释下Callback是什么，举个例子"><a href="#15-解释下Callback是什么，举个例子" class="headerlink" title="15. 解释下Callback是什么，举个例子"></a>15. 解释下Callback是什么，举个例子</h3><h3 id="16-在使用React-Router，并给一个按钮绑定点击事件处理函数时，如何在事件处理函数中用js进行页面跳转"><a href="#16-在使用React-Router，并给一个按钮绑定点击事件处理函数时，如何在事件处理函数中用js进行页面跳转" class="headerlink" title="16.在使用React Router，并给一个按钮绑定点击事件处理函数时，如何在事件处理函数中用js进行页面跳转"></a>16.在使用React Router，并给一个按钮绑定点击事件处理函数时，如何在事件处理函数中用js进行页面跳转</h3><h3 id="17-为什么需要架构分层？并画图说明Core-Service-Shell的职责以及他们之间的关系？"><a href="#17-为什么需要架构分层？并画图说明Core-Service-Shell的职责以及他们之间的关系？" class="headerlink" title="17. 为什么需要架构分层？并画图说明Core/Service/Shell的职责以及他们之间的关系？"></a>17. 为什么需要架构分层？并画图说明Core/Service/Shell的职责以及他们之间的关系？</h3><h3 id="18-面向对象的三特性五原则是什么？请分别予以简要解释并以学习过程中的代码为例。"><a href="#18-面向对象的三特性五原则是什么？请分别予以简要解释并以学习过程中的代码为例。" class="headerlink" title="18. 面向对象的三特性五原则是什么？请分别予以简要解释并以学习过程中的代码为例。"></a>18. 面向对象的三特性五原则是什么？请分别予以简要解释并以学习过程中的代码为例。</h3><h3 id="19-Ajax是什么，有什么用？"><a href="#19-Ajax是什么，有什么用？" class="headerlink" title="19. Ajax是什么，有什么用？"></a>19. Ajax是什么，有什么用？</h3><h3 id="20-mockito是什么，用代码大概描述下使用方法和应用场景"><a href="#20-mockito是什么，用代码大概描述下使用方法和应用场景" class="headerlink" title="20. mockito是什么，用代码大概描述下使用方法和应用场景"></a>20. mockito是什么，用代码大概描述下使用方法和应用场景</h3><h3 id="21-一个完整的测试代码至少应该包含哪几个部分？每个部分的租用是什么？"><a href="#21-一个完整的测试代码至少应该包含哪几个部分？每个部分的租用是什么？" class="headerlink" title="21. 一个完整的测试代码至少应该包含哪几个部分？每个部分的租用是什么？"></a>21. 一个完整的测试代码至少应该包含哪几个部分？每个部分的租用是什么？</h3><h3 id="22-CSS盒子模型是什么？"><a href="#22-CSS盒子模型是什么？" class="headerlink" title="22.CSS盒子模型是什么？"></a>22.CSS盒子模型是什么？</h3><h3 id="23-如何使用Spring-Data进行复杂的查询？写一个例子"><a href="#23-如何使用Spring-Data进行复杂的查询？写一个例子" class="headerlink" title="23.如何使用Spring Data进行复杂的查询？写一个例子"></a>23.如何使用Spring Data进行复杂的查询？写一个例子</h3><h3 id="24-Git分支是什么？他的主要应用场景是什么？"><a href="#24-Git分支是什么？他的主要应用场景是什么？" class="headerlink" title="24. Git分支是什么？他的主要应用场景是什么？"></a>24. Git分支是什么？他的主要应用场景是什么？</h3><h3 id="25-解释什么是SUT和DOC，以及他们之间的关系"><a href="#25-解释什么是SUT和DOC，以及他们之间的关系" class="headerlink" title="25.解释什么是SUT和DOC，以及他们之间的关系"></a>25.解释什么是SUT和DOC，以及他们之间的关系</h3><h3 id="26-为何要做DB-Migration？"><a href="#26-为何要做DB-Migration？" class="headerlink" title="26. 为何要做DB Migration？"></a>26. 为何要做DB Migration？</h3><h3 id="27-在开发阶段如何使用Flyway进行数据库管理？"><a href="#27-在开发阶段如何使用Flyway进行数据库管理？" class="headerlink" title="27.  在开发阶段如何使用Flyway进行数据库管理？"></a>27.  在开发阶段如何使用Flyway进行数据库管理？</h3><h3 id="28-为什么使用了Annotation标记过后的类会被Spring找到"><a href="#28-为什么使用了Annotation标记过后的类会被Spring找到" class="headerlink" title="28. 为什么使用了Annotation标记过后的类会被Spring找到"></a>28. 为什么使用了Annotation标记过后的类会被Spring找到</h3><h3 id="29-Spring-Boot与Spring-MVC的区别，以及他们主要的作用"><a href="#29-Spring-Boot与Spring-MVC的区别，以及他们主要的作用" class="headerlink" title="29. Spring Boot与Spring MVC的区别，以及他们主要的作用"></a>29. Spring Boot与Spring MVC的区别，以及他们主要的作用</h3><h3 id="30-举例说明DTO是什么及其作用"><a href="#30-举例说明DTO是什么及其作用" class="headerlink" title="30. 举例说明DTO是什么及其作用"></a>30. 举例说明DTO是什么及其作用</h3><h3 id="31-如果你是一个team-leader，当团队接到一个新项目时，请为以下几个问题提供可落地解决方案。"><a href="#31-如果你是一个team-leader，当团队接到一个新项目时，请为以下几个问题提供可落地解决方案。" class="headerlink" title="31. 如果你是一个team leader，当团队接到一个新项目时，请为以下几个问题提供可落地解决方案。"></a>31. 如果你是一个team leader，当团队接到一个新项目时，请为以下几个问题提供可落地解决方案。</h3><ol><li><h4 id="如何让团队站在业务视角理解和确认用户的需求"><a href="#如何让团队站在业务视角理解和确认用户的需求" class="headerlink" title="如何让团队站在业务视角理解和确认用户的需求"></a>如何让团队站在业务视角理解和确认用户的需求</h4></li><li><h4 id="当用户需求确认以后，如何将需求转换为团队的工作任务"><a href="#当用户需求确认以后，如何将需求转换为团队的工作任务" class="headerlink" title="当用户需求确认以后，如何将需求转换为团队的工作任务"></a>当用户需求确认以后，如何将需求转换为团队的工作任务</h4></li><li><h4 id="当团队协作，并行工作提交代码时，如何避免因为冲突二造成的协作混乱"><a href="#当团队协作，并行工作提交代码时，如何避免因为冲突二造成的协作混乱" class="headerlink" title="当团队协作，并行工作提交代码时，如何避免因为冲突二造成的协作混乱"></a>当团队协作，并行工作提交代码时，如何避免因为冲突二造成的协作混乱</h4></li></ol>]]></content>
      
      
      <categories>
          
          <category> 培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> React </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端总结</title>
      <link href="/2018/08/20/%E5%90%8E%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/20/%E5%90%8E%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-JPA"><a href="#Spring-JPA" class="headerlink" title="Spring JPA"></a>Spring JPA</h1><h2 id="依赖与配置"><a href="#依赖与配置" class="headerlink" title="依赖与配置"></a>依赖与配置</h2><p>build.gradle</p><a id="more"></a><pre class=" language-gradle"><code class="language-gradle">compile('org.springframework.boot:spring-boot-starter-data-jpa')compile('org.flywaydb:flyway-core')runtime('mysql:mysql-connector-java')</code></pre><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> ***    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span>  jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/<span class="token punctuation">{</span>database_name<span class="token punctuation">}</span><span class="token punctuation">?</span>characterEncoding=UTF<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> mysql</code></pre><p>mysql中创建对应的数据库，然后配置flyway：在application.yml同级目录下创建db.migration文件夹，以V{year}{month}{day}{time}__{action}.sql写入创建表的脚本（eg.V201808111253__init_table.sql）。</p><h2 id="Entity-实体对象"><a href="#Entity-实体对象" class="headerlink" title="Entity 实体对象"></a>Entity 实体对象</h2><p>对应数据库中的表，储存表中的相应内容示例如下：</p><p>Product：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"product"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GenerateValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span>GenerateType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Coloum</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"product_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Controller-HTTP消息分发"><a href="#Controller-HTTP消息分发" class="headerlink" title="Controller HTTP消息分发"></a>Controller HTTP消息分发</h2><p>ProductController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProductService productService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponeEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>productService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Service-业务逻辑处理"><a href="#Service-业务逻辑处理" class="headerlink" title="Service 业务逻辑处理"></a>Service 业务逻辑处理</h2><p>productService</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AutoWired</span>    <span class="token keyword">private</span> ProductRepository productRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Product <span class="token function">get</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> productRepository            <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>ProductNotFoundException<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Repository-与数据库交互"><a href="#Repository-与数据库交互" class="headerlink" title="Repository 与数据库交互"></a>Repository 与数据库交互</h2><p>ProductRepository（自定义数据库）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomProductRepository</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">searchProduct</span><span class="token punctuation">(</span>Double minPrice<span class="token punctuation">,</span> Double maxPrice<span class="token punctuation">,</span> String brand<span class="token punctuation">,</span> String category<span class="token punctuation">,</span> Integer pageNum<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> String order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProductRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CustomProductRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PersistenceContext</span>    <span class="token keyword">private</span> EntityManager entityManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">searchProduct</span><span class="token punctuation">(</span>Double minPrice<span class="token punctuation">,</span> Double maxPrice<span class="token punctuation">,</span> String brand<span class="token punctuation">,</span> String category<span class="token punctuation">,</span> Integer pageNum<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> String order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CriteriaBuilder builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CriteriaQuery<span class="token operator">&lt;</span>Product<span class="token operator">></span> query <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Root<span class="token operator">&lt;</span>Product<span class="token operator">></span> root <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Predicate predicate <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">conjunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minPrice <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            predicate <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">greaterThanOrEqualTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        Order priceOrder<span class="token punctuation">;</span>        CriteriaQuery<span class="token operator">&lt;</span>Product<span class="token operator">></span> criteriaQuery<span class="token punctuation">;</span>        priceOrder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        criteriaQuery <span class="token operator">=</span> query                        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>priceOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> entityManager            <span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteriaQuery<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setFirstResult</span><span class="token punctuation">(</span>pageNum <span class="token operator">*</span> pageSize<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setMaxResults</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Product<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">,</span> CustomProductRepository <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h2 id="依赖与配置-1"><a href="#依赖与配置-1" class="headerlink" title="依赖与配置"></a>依赖与配置</h2><pre class=" language-gradle"><code class="language-gradle">    testCompile('com.github.database-rider:rider-spring:1.2.9') {        exclude group: 'org.slf4j', module: 'slf4j-simple'    }    testCompile('io.rest-assured:rest-assured:3.1.0')    testCompile('org.springframework.boot:spring-boot-starter-test')</code></pre><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试为保证测试独立性，通常使用需要创建测试替身，下面仍然以Product为例：</p><p>ProductServiceTest</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>MockitoJUnitRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">private</span> ProductRepository productRepository<span class="token punctuation">;</span>    <span class="token keyword">private</span> ProductService productService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        productService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span>productRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token function">should_get_all_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//given</span>        Product product <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        products<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">given</span><span class="token punctuation">(</span>productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//when</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> actual <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//then</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_remove_a_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//given</span>        <span class="token comment" spellcheck="true">//when</span>        productService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">anyLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//then</span>        <span class="token function">verify</span><span class="token punctuation">(</span>productRepository<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token function">anyLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>使用Database Rider和RestAssured进行集成测试，为了保证测试独立性，需要设定测试数据库样本，默认在resouces/datasets目录下创建yml文件，示例如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span>table_name<span class="token punctuation">}</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>      <span class="token punctuation">...</span>    <span class="token punctuation">-</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>      <span class="token punctuation">...</span></code></pre><p>同时为了保证实际运行的数据库不被测试影响，需要新建一个application-test.yml配置文件，重建一个测试数据库，进行测试，然后在测试代码中加入@ActiveProfiles(“test”)指示测试使用的配置文件</p><p>ProductControllerTest</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> RANDOM_PROT<span class="token punctuation">)</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DBRider</span><span class="token annotation punctuation">@DBUnit</span><span class="token punctuation">(</span>caseSensitiveTableNames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LocalServerTest</span>    prvate <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@DataSet</span><span class="token punctuation">(</span><span class="token string">"product.yml"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//@ExpectedDataSet("expected_added_product.yml")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_add_a_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        RestAssured            <span class="token punctuation">.</span><span class="token function">given</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>newProduct<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/products"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="依赖与配置-2"><a href="#依赖与配置-2" class="headerlink" title="依赖与配置"></a>依赖与配置</h2><pre class=" language-gradle"><code class="language-gradle">ext {    springCloudVersion = 'Finchley.SR1'}...    compile('org.springframework.cloud:spring-cloud-starter-security')    compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul')    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server')...dependencyManagement {    imports {        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"    }}</code></pre><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>控制服务的访问权限，以简单的通过数据库中的用户信息进行校验为例：</p><p>config/WebSecurityConfig</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AutoWired</span>    <span class="token keyword">private</span> MyUserDetailService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@AutoWired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">globalConfig</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throw</span> Exception <span class="token punctuation">{</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AuthenticationManager <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throw</span> Exception <span class="token punctuation">{</span>        http            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyMatchers</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//白名单</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解决post等403错误</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>config/MyUserDetailService</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUserDetailService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throw</span> UsernameNotFoundException <span class="token punctuation">{</span>        User user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">{</span>info<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>login/JwtUser</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUser</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String fullname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JwtUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authorities <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">JwtUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Zuul-智能路由"><a href="#Zuul-智能路由" class="headerlink" title="Zuul 智能路由"></a>Zuul 智能路由</h2><p>配置Zuul可以使用Zuul服务的端口访问多个微服务的接口：</p><p>在application.yml中，加入配置项，如下所示：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span>    <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token key atrule">products</span><span class="token punctuation">:</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /products/**            <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>xxxx/products        <span class="token punctuation">...</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /**            <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>xxxx</code></pre><p>若要对接口进行部分业务处理，则可以加入filter，如下所示：</p><p>filter/mallFilter</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MallFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"pre"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ZuulException <span class="token punctuation">{</span>        RequestContext currentContext <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Euraka"><a href="#Euraka" class="headerlink" title="Euraka"></a>Euraka</h2><p>Euraka 负责服务注册与发现</p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>Euraka服务中添加@EnableEurekaServer注解，并在配置文件中添加以下内容即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> register<span class="token punctuation">-</span>server<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">registerWithEureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/</code></pre><p>将服务在Eureka中注册只需要添加一个依赖一个注解一段配置</p><p>一个依赖：</p><pre><code>    compile(&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;)</code></pre><p>一个注解：<code>@EnableEurekaClient</code></p><p>一段配置:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token punctuation">{</span>eureka_port<span class="token punctuation">}</span>/eureka/</code></pre><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>若服务依赖另一个服务的接口，则需要该服务能够发现依赖服务，实现流程如下：</p><p>添加依赖：</p><p><code>compile(&#39;org.springframework.cloud:spring-cloud-starter-openfeign&#39;)</code></p><p>restService/client</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"{dependence_server_name}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/products/{id}"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"id"</span> Long id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端总结</title>
      <link href="/2018/08/20/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/20/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVASCRIPT"><a href="#JAVASCRIPT" class="headerlink" title="JAVASCRIPT"></a>JAVASCRIPT</h2><hr><p>JavaScript是一门解释性语言，定义变量时统一使用let。</p><a id="more"></a><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul><li>filter({condition})——筛选数组中某一部分元素</li><li>concat({list})——将两个数组组合，返回组合后的数组</li><li>map((listItem, index)=&gt;{})——对array中的每一个元素执行操作，可以接受两个参数，第二个参数代表当前元素的下标。并将结果保存在当前数组。</li><li>forEach()——与map类似，但不返回结果到当前数组</li><li>some({condition})——如果数组存在满足条件的元素则返回true，否则返回false</li><li>every({condition})——如果数组每个元素都满足条件，则返回true，否则返回false</li></ul><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul><li><code>let [a, b] = [1, 2, 3] ==&gt; a = 1, b = 2</code>——自动将元素按顺序赋值，多余的舍弃</li><li><code>let [c, d] = [{item: apple, count: 1}, 23]==&gt;c = {item:apple, count: 1}, d = 23</code>——粒度可以自由变化</li><li><code>let props={a: 1, b: 2, c: 3}; {...props}==&gt;{a: 1}， {b:2}， {c:3}</code>—— <code>...</code>表示将一个可迭代对象的元素展开为参数序列。</li></ul><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p><code>Hello ${Variable}</code> 模板字符串使用(<code></code>)包裹内容，可以在字符串中添加变量，简化代码。</p><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p><code>Object.assign(src1, src2...)</code>使用assign可以连接多个相同类型的数据，如{}，[]等对象，并返回组合对象的深拷贝。对于{}对象，assign会自动找到相同的key，并使用后面的value替换之前的value（eg.<code>Object.assign({value:2, text:&#39;test&#39;}, {value:1})==&gt;{value:1, text:&#39;test&#39;}</code>）</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><hr><p>HTML语言不是编程语言，而是一种标记语言，其通过标签<tag></tag>与属性和其中包裹的内容组成。</p><p>根据HTML从上到下的渲染机制，在HTML中引入.css文件需要将其添加在<head><link rel="stylesheet" href="/css/prism.css" type="text/css"></head>内部，保证<body></body>内的样式能够正确渲染。</p><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a><a href="https://docs.emmet.io/cheat-sheet/" target="_blank" rel="noopener">Emmet</a></h3><p>使用Emmet插件极大的提升编写HTML代码的效率。eg. ul&gt;li*4表示在ul标签下连续创建4个li标签。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h3 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h3><p>BootStrap是一种前端框架，其自带的栅格系统可以很方便的解决HTML中的布局问题，其主要通过在块级元素<div>中添加class属性进行实现，行元素使用class=’row’，列元素使用class=’col-sm-{N}’实现，需要注意的是每个row包裹下的所有元素块都需要有col属性，否则会出现排版混乱的问题。</div></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><hr><p>CSS用于控制HTML内容的样式，语法非常简单，只有一种语法：<code>selector {declaration1;declaration2;...}</code></p><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><ul><li>block:块级显示。一个块级元素会新开一行并尽可能撑满容器</li><li>inline:行内显示。宽高无用</li><li>none:隐藏显示。不会保留该元素的占位。visiblility则保留</li><li>inline-block:行内块元素，同时具有块元素的宽高属性和行内元素的同行属性</li><li>table:此元素会作为块级表格显示，表格前后带有换行符</li><li>inline-tabel:此元素会作为内联表格显示。表格前后没有换行符</li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>html文档中的每一个元素都被描绘成矩形盒子，该盒子通过一个模型来描述其占用空间的大小，这个模型就叫做盒子模型。盒子模型通过四个边界描述：margin（外边界），border（边框），padding（内边界），content（内容）。</p><p>对于行内元素的非替换元素，eg.a, span标签等。</p><ol><li>可以设置margin-left, margin-right属性，无法设置margin-top, margin-bottom属性。</li><li>行内元素border和padding可以设置，但是border-top和padding-top到页面顶部后就不再增加。</li></ol><p>对于替换元素，eg. input, img标签等则margin，border，padding都有效果。</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><hr><p>React主要作用在于View层的渲染，Redux则负责数据的储存和传递。在使用React构建网站时需要遵循以下原则：</p><ol><li>构建组件树</li><li>为组件数添加相应的state和props</li><li>编码实现静态组件树</li><li>为静态网页架构添加数据</li><li>编写数据交互逻辑</li></ol><p><strong>在使用React时，需要特别注意将所有的数据与HTML架构分离，数据统一由state或者Redux储存，然后通过props进行传递。</strong></p><p>相较于webpack繁杂的配置步骤，使用<code>npx create-react-app {repo_name}</code>可以快速构建React环境进行编码。</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>Redux的核心概念包括三部分：action，reducer，store。</p><p>特别需要注意的是reducer中，；不能对store中储存的状态进行任何更改，需要使用Object.assign对元素进行深拷贝。</p><h3 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h3><p>使用过程中需要在React的根标签部分包裹<provider store="{store}"></provider>部分。</p><p>一个React与Redux通信的代码示例如下：</p><p>reducer.js:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"ACTION_TYPE"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>prevState<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> prevState<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>component.js:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>tag<span class="token operator">></span>        <span class="token operator">...</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tag<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        prop1<span class="token punctuation">:</span>state<span class="token punctuation">.</span>prop1<span class="token punctuation">,</span>        prop2<span class="token punctuation">:</span>state<span class="token punctuation">.</span>prop2           <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        handleClicked<span class="token punctuation">:</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span><span class="token string">"ACTION_TYPE"</span><span class="token punctuation">,</span>                <span class="token operator">...</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> VisibleComponent <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> VisibleComponent<span class="token punctuation">;</span>       </code></pre>]]></content>
      
      
      <categories>
          
          <category> 培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
